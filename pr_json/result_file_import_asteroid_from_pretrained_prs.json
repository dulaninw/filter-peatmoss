[
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-12-15T15:29:00Z",
        "PR Comment": "Should have a `ifcuda(with_cuda=..., without_cuda=...)` function? \nThis could be rewritten as \n```python\ndevice = args.device if args.device is not None else ifcuda(\"cuda\", \"cpu\") \n```",
        "PR/Issue Number": "375"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-12-15T15:37:08Z",
        "PR Comment": "Hmmmm... not convinced :-D because that function would be exactly\n\n```\ndef ifcuda(a, b):\n    return a if torch.cuda.is_available() else b\n```\n\nwhich isn't much different to just inlining that exact code",
        "PR/Issue Number": "375"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-12-15T17:54:34Z",
        "PR Comment": "Yes, it would be exactly this. \nInlining that code would be \n```python\ndevice = args.device if args.device is not None else \"cuda\" if torch.cuda.is_available() else \"cpu\"\n```\nwhich is much less clear. \nI'll give it more thought :wink:",
        "PR/Issue Number": "375"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-12-15T21:46:45Z",
        "PR Comment": "I\u2019m ok with both :)",
        "PR/Issue Number": "375"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-12-15T15:00:00Z",
        "PR Comment": "Should be good for review!",
        "PR/Issue Number": "375"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2021-01-04T09:19:34Z",
        "PR Comment": "Let's fix the linting and merge that. ",
        "PR/Issue Number": "375"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-04T10:47:46Z",
        "PR Comment": "This was the easiest (but maybe not the cleanest) way to make OLA work with any/unknown models, like in asteroid-infer. The alternative would be to add `n_src` to the `Separatable` interface (ie. the model)",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-04T10:48:39Z",
        "PR Comment": "I didn't know where to stick all of this, so it lives in `asteroid.foo` for now :-D ",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-04T10:49:40Z",
        "PR Comment": "Protocols are a new feature in Python 3.8 that define an interface without requiring the implementing classes to inherit some abstract base class (ie. duck typing). It is used only for documentation right now",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-04T11:05:35Z",
        "PR Comment": "Wasn't worth adding this to the protocol. 99% of the time a Separatable instance will be a `nn.Module`. For `LambdaOverlapAdd`, `get_device` infers the correct device from `.parameters()` (wich is identical to `.nnet.parameters()`)",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-04T11:07:32Z",
        "PR Comment": "Swapped order as noted in #279 ",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-04T11:08:12Z",
        "PR Comment": "Having one method start with `_` is a bit ugly but I didn't know how to change it without being backwards incompatible. We could name it `forward_separate()` and have that default to `_separate()` in `BaseModel` but not sure if it's worth it just for a pretty name",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-04T11:09:25Z",
        "PR Comment": "Removed these docstrings since these aren't actually function params",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-04T11:10:33Z",
        "PR Comment": "Fixed resample not being passed to separate",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-04T11:14:37Z",
        "PR Comment": "Unrelated to this PR, but I think this is not very good design. You will always pass exactly 1 model, but N files. Usually you'd use a `--named-flag` for the model here, and unnamed/positional arguments for the files: `asteroid-infer -m mymodel file1.wav file2.wav ...`.",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-04T12:59:08Z",
        "PR Comment": "How do you handle the docs then? \n![image](https://user-images.githubusercontent.com/18496796/98114600-c5afc500-1ea5-11eb-9118-a58adab8fce8.png)\n",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-04T13:03:14Z",
        "PR Comment": "Do you have pointers for CLI design ?\nThe current `asteroid-infer mymodel --files all.wav files.wav` seems equally OK to me. But I'm happy to question this. ",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-04T13:04:20Z",
        "PR Comment": "This line is way too long.. Black is supposed to handle that right? ",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-04T13:05:36Z",
        "PR Comment": "I'd do the opposite `--ola-no-reorder` or smth like this. It's better to reorder by default. ",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-04T13:06:31Z",
        "PR Comment": "Oh yes, thanks. ",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-04T13:08:28Z",
        "PR Comment": "Cool. ",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-04T13:10:33Z",
        "PR Comment": "One thing I don't like it that this won't have docs and the arguments are hidden. \nThis is not so nice when working in interactive envs. ",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-04T13:14:53Z",
        "PR Comment": "Side note: Even without backward compat concers, I would have liked it this way. \n\n```python\nfrom asteroid import ConvTasNet\n\nmodel = ConvTasNet.from_pretrained(\"\")\nmodel.separate(\"\")\n```\n\nseems nicer \n\n```python\nfrom asteroid import ConvTasNet\nfrom asteroid.foo import separate\n\nmodel = ConvTasNet.from_pretrained(\"\")\nseparate(model, \"\")\n```\n\nSo we can remove the \"Backwards compatibility\" ",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-04T13:17:02Z",
        "PR Comment": "`separate`-able?",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-04T13:19:49Z",
        "PR Comment": "I understand the current goal of `Separatable` and I'll look more into `Protocol` later, thanks for the explanation.",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-04T13:23:08Z",
        "PR Comment": "Got it and agree. ",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-04T13:24:13Z",
        "PR Comment": "Would it make sense to have possible default value in `get_device` like in `getattr`? \nWe'd use `get_device(model, \"cpu\")`, and `Separatable` would be 100% accurate? ",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-04T13:29:40Z",
        "PR Comment": "I agree. \nI don't remember how it evolved but [this line](https://github.com/mpariente/asteroid/blob/master/asteroid/models/base_models.py#L31) annoys me. Asking users to overwrite a \"private\" method doesn't seem right.  \n\nI'd call it `inference_forward` or `wav2wav_forward` or IDK. Let's come up with a good name. \nBecause this is the interface we're providing users for their own separatable, I think it is worth it, even for a pretty name. ",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-04T13:36:34Z",
        "PR Comment": "I think this is fine. I was thinking of making it optional since the beginning. \nI guess you left it as a positional argument on purpose, to force people to know it's better to provide it?",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-04T13:39:10Z",
        "PR Comment": "That's more confusing than clarifying IMO. This is enough:\n> `LambdaOverlapAdd` can be used with `foo.separate` and the `asteroid-infer` CLI \n",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-04T13:43:30Z",
        "PR Comment": "This also doesn't seem right. We should change the name. ",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-04T13:46:33Z",
        "PR Comment": "I would be more flexible here\n```python\nseparate_func = getattr(model, \"_separate\", model)\nout_wavs = separate_func(wav, **kwargs)\n```\n\nThis will call `_separate` where possible, `__call__` (calls `forward`) for `nn.Module` and also supports plain functions, is that useless? ",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-04T13:52:47Z",
        "PR Comment": "We could check that the model does have `sample_rate` and raise an informative error otherwise.",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-04T13:59:59Z",
        "PR Comment": "This is wrong, no? \nCalling `separate` on this class would return `nnet._separate(*args, **kwargs)` instead of using the OLA we want. This should be `self.forward`. \nOr am I mistaken? ",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-04T14:02:02Z",
        "PR Comment": "A bit unrelated but we should be able to pass kwargs from here to the network.\nWith a warning that we don't segment the kwargs so they are shared between chunks.  ",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-04T14:02:33Z",
        "PR Comment": "Also not clear to me where to put this yet ^^",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-04T14:27:15Z",
        "PR Comment": "No because I didn\u2019t want to break the interface ",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-04T14:29:02Z",
        "PR Comment": "Oh... Didn\u2019t think about that. I will check if there is a better way. ",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-04T14:31:48Z",
        "PR Comment": "Oops ",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-04T15:41:09Z",
        "PR Comment": "Ok. ",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-19T10:44:32Z",
        "PR Comment": "I think \"separatable\" would be more common, but from a quick Google it seems the more appropriate term would be \"separable\". Shall we change to that?",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-19T12:12:22Z",
        "PR Comment": "<img width=\"528\" alt=\"Bildschirmfoto 2020-11-19 um 13 10 34\" src=\"https://user-images.githubusercontent.com/175722/99664594-b2d1ee80-2a68-11eb-967f-ad0618f2c893.png\">\n\nWhat do you think about this? It is autogenerated from `--help`.\n\nOr do you want actual Python code docs for people that want to work on the CLI code itself?",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-19T12:19:24Z",
        "PR Comment": "I think this is reasonable, but it's a bit ugly. \nAnyway, we should probably change the way we make CLI (using `click`, `typer` or `fire` which I discovered only recently), so yes, it does look fine for now. ",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-19T12:59:41Z",
        "PR Comment": "@mpariente ",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-19T14:32:54Z",
        "PR Comment": "I thought that this was a naming convention. That because the method was `separate`, we called it `Separatable`. Isn't this the case? ",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-19T14:40:34Z",
        "PR Comment": "I don't know of any. It's just a pattern that has been used since forever by all UNIX commands. For example it makes it possible to use the program with `xargs`:\n\n```\n# Inference on all .wav files in /foo\nfind /foo | grep 'wav$' | xargs asteroid-infer -m mymodel\n```",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-19T14:44:52Z",
        "PR Comment": "Yes but seems like to proper name would be \"separable\".\n\nWe could also call the interface `Separate`, which is common eg. in Rust (eg. https://doc.rust-lang.org/reference/special-types-and-traits.html#copy instead of Copyable).\n\nLet's just pick any name, I don't really care :D",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-19T14:57:27Z",
        "PR Comment": "Ok, thanks. I haven't been using UNIX for so long so I don't know much.\nNote that we support globs in --files, but I understand the point. ",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-24T20:35:17Z",
        "PR Comment": "```suggestion\nfrom .dsp.overlap_add import LambdaOverlapAdd\nfrom .utils import get_device\n```",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-19T08:22:47Z",
        "PR Comment": "Should we fix this and merge it? ",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-19T11:03:19Z",
        "PR Comment": "Addressed most of the suggestions. Did not change the `_separate` name so far. Will continue working on it later",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-19T11:32:56Z",
        "PR Comment": "The `_separate` can be change in a follow up PR, it'll be better that way ",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-19T14:46:11Z",
        "PR Comment": "We still need a name for all of this that's better than `asteroid.foo`! Maybe @popcornell you have an idea?",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-19T14:55:04Z",
        "PR Comment": "Should be in engine maybe ? \nLike` engine.inference`. \nThen you can put into the asteroid` __init__` and maybe have `from asteroid import separate`. ",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-19T14:59:07Z",
        "PR Comment": "`engine` is only related to training for now. I would keep it out of there. \nWhat about simply `asteorid/separate.py`?  ",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-19T15:09:22Z",
        "PR Comment": "`asteroid.separate` sounds ok",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-20T10:38:05Z",
        "PR Comment": "Also good. If we plan to use `engine` only for training in 1.0 we should rename to `training` probably. ",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-20T11:02:14Z",
        "PR Comment": "Haha, yes ^^",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-24T14:58:35Z",
        "PR Comment": "This mainly looked ready right? \nLet's rename to `asteroid.separate` and review again. ",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-24T15:04:04Z",
        "PR Comment": "yes I'll do it",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-24T15:31:00Z",
        "PR Comment": "/rebase",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-11-24T15:59:54Z",
        "PR Comment": "Oh, it already ran the tests, but didn't refresh the page. Well, then this seems good to go :)",
        "PR/Issue Number": "305"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-10-21T20:09:17Z",
        "PR Comment": "This is great. LGTM!",
        "PR/Issue Number": "285"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-10-22T08:22:37Z",
        "PR Comment": "\\rebase",
        "PR/Issue Number": "285"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-10-22T08:24:02Z",
        "PR Comment": "\\rebase",
        "PR/Issue Number": "285"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-10-22T09:03:05Z",
        "PR Comment": "Missing test for the CLI. Merging anyway. ",
        "PR/Issue Number": "285"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-10-21T16:45:06Z",
        "PR Comment": "I think we should not do any of this. It's easy for the user to resample for model input and resample the model output. So better be explicit and require the user to type a bit more. As a compromise we could have automatic resampling behind a flag: if the flag is true, resample without warning; if the flag is false, raise an error.",
        "PR/Issue Number": "283"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-10-21T17:13:45Z",
        "PR Comment": "It makes sense to do it because of the CLI IMO..",
        "PR/Issue Number": "283"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-10-22T07:12:23Z",
        "PR Comment": "This is exactly how I\u2019d do it. If you u prefer you could even make resample default to true in the CLI, but not sure if that\u2019s good. ",
        "PR/Issue Number": "283"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-10-01T10:06:27Z",
        "PR Comment": "Looks like I tend to add a leading space where I shouldn't :joy: \nThanks !",
        "PR/Issue Number": "265"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-10-01T10:09:29Z",
        "PR Comment": "Note you can also add `?w=1` to the GH URL to hide whitespace changes.",
        "PR/Issue Number": "265"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-10-01T10:11:19Z",
        "PR Comment": "That's super cool ! \nWhere can I find more like this?",
        "PR/Issue Number": "265"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-10-01T10:21:18Z",
        "PR Comment": "> Where can I find more like this?\n\nI don't know, honestly. You may find the list of keyboard shortcuts helpful; press `?` on this page.",
        "PR/Issue Number": "265"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-08-23T16:47:26Z",
        "PR Comment": "I'd add `recursive=True` to `glob()`",
        "PR/Issue Number": "236"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-08-23T18:52:13Z",
        "PR Comment": "second this ",
        "PR/Issue Number": "236"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-08-23T16:51:42Z",
        "PR Comment": "Nice and simple!\n\n- We can use librosa to load all the files, it uses `soundfile` and falls back to `audioread` (ffmpeg on Linux IIRC). But it requires librosa to be installed. We could also try soundfile first and then fall back to librosa. Soundfile will get mp3 support soon https://github.com/erikd/libsndfile/issues/258\n- I think we should add a check to `separate()` to make sure it never overwrites any files. That's particularly important now that we have code that goes through entire directories.\n\nAm I correct that with this, user can now install Asteroid and do something like `asteroid-infer mpariente/convtasnet-xyz /my/files` without ever manually downloading any models? That would be awesome.",
        "PR/Issue Number": "236"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-08-23T18:32:48Z",
        "PR Comment": "> We can use librosa to load all the files, it uses soundfile and falls back to audioread (ffmpeg on Linux IIRC). But it requires librosa to be installed. We could also try soundfile first and then fall back to librosa. Soundfile will get mp3 support soon erikd/libsndfile#258\n\nI would use torchaudio here (which is using sox, and recently support for opus and ogg was added) or directly use ffmpeg-python which is supports almost all formats but is quite slow.",
        "PR/Issue Number": "236"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-08-23T18:54:21Z",
        "PR Comment": "Yes maybe torchaudio will be better also because they plan to support more formats in the future. ",
        "PR/Issue Number": "236"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-08-23T18:55:50Z",
        "PR Comment": "I'll use torchaudio for loading then. \nThis will come in a follow up PR because it's not really related to the CLI. Thanks for the feedback",
        "PR/Issue Number": "236"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-08-23T18:56:53Z",
        "PR Comment": "> I think we should add a check to separate() to make sure it never overwrites any files. That's particularly important now that we have code that goes through entire directories.\n\nYes, I agree. It will be in the follow up PR as well. \n\n> Am I correct that with this, user can now install Asteroid and do something like asteroid-infer mpariente/convtasnet-xyz /my/files without ever manually downloading any models? That would be awesome.\n\nThis is correct. This was also the case without the CLI. \nNote that the downloaded models are cached as well. ",
        "PR/Issue Number": "236"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-08-23T19:49:33Z",
        "PR Comment": "Only tested locally, we'll need to find a way to correctly test the CLI in the near future. ",
        "PR/Issue Number": "236"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-08-13T07:08:33Z",
        "PR Comment": "Sounds good! Maybe there's also some kind of warning mode for pre-commit that we could use with flake8.",
        "PR/Issue Number": "198"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-08-13T07:19:56Z",
        "PR Comment": "I saw that `--exit-zero` does that, but I'm not sure it's useful because the commit is sent right? \nOr if we integrate deep source, the warnings appear locally so they can be fixed in the next commit? ",
        "PR/Issue Number": "198"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-08-13T07:20:44Z",
        "PR Comment": "TravisCI takes around 15mins per build, I'm bored. \nI'm going to switch to Github Actions soon. ",
        "PR/Issue Number": "198"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-08-11T12:55:32Z",
        "PR Comment": ">     * Couldn't use automodule on `asteroid.data` without members\n\nWhat do you mean with that?",
        "PR/Issue Number": "192"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-08-11T13:44:17Z",
        "PR Comment": "I had to do that \n```rst\nPyTorch Datasets\n================\n\n.. currentmodule:: asteroid.data\n\n.. autoclass:: LibriMix\n.. autoclass:: Wsj0mixDataset\n.. autoclass:: WhamDataset\n.. autoclass:: WhamRDataset\n.. autoclass:: SmsWsjDataset\n.. autoclass:: KinectWsjMixDataset\n.. autoclass:: DNSDataset\n.. autoclass:: MUSDB18Dataset\n```\n\nInstead, I'd like to do that \n\n```rst\nPyTorch Datasets\n================\n.. automodule:: asteroid.data\n   :members:\n```\nand this doesn't list anything actually. \nIf I do this \n\n```rst\nPyTorch Datasets\n================\n.. automodule:: asteroid.data\n   :members: LibriMix, WhamDataset\n```\n\nit works though.",
        "PR/Issue Number": "192"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-08-11T20:19:50Z",
        "PR Comment": "Hey, sorry for the late reply.\n\nI tried to generate the documentation and found that I was missing the sphinx extensions `m2r2`, `nbsphinx` used by `docs/source/conf.py`. Would it be sensible to add them to `requirements.txt`?\n\nAbout the `automodule` directive, have you tried with the `:imported-members:` added to `data.rst`? So the complete file would contain:\n\n```rst\nPyTorch Datasets\n================\n\n.. automodule:: asteroid.data\n    :members:\n    :imported-members:\n```\n\nStupid question, is there a way to type double colon without github popping a floating window with all the available emojis (which makes the interface slow AF...)?",
        "PR/Issue Number": "192"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-08-11T20:28:44Z",
        "PR Comment": "Thanks for the answer. \nYes, I can add the extensions to the docs requirements. \nI think I tried and didn't work either, I'll try again tomorrow !\n\nAbout the `:`, if you add a space after it quite fast, it doesn't show up :joy: \nBut I like emojis so I won't complain :star_struck: ",
        "PR/Issue Number": "192"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-08-11T20:29:30Z",
        "PR Comment": "Correction, both extensions are in the `docs/requirements.txt` which is the one to build the docs.",
        "PR/Issue Number": "192"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-08-11T20:40:33Z",
        "PR Comment": "> I think I tried and didn't work either, I'll try again tomorrow !\n\nWeird, it works on my end \ud83d\ude15 . When you try again, can you reload the page with `Ctrl + Shift + R`, which bypasses the cache? Otherwise, you may visualize an outdated html document.\n\n> Correction, both extensions are in the docs/requirements.txt which is the one to build the docs.\n\nThanks for the clarification. I completely missed the file as I was expecting all the requirements to be in a single `requirements.txt` (habits \ud83d\ude44...)\n\n> Couldn't have anchor point in the index when using automodule (I'd like to have all elements listed in the sidebar)\n\nDoes this [stackoverflow](https://stackoverflow.com/questions/58486590/sphinx-sidebar-include-modules-functions-and-class-methods) thread describe what you want to achieve? Sounds like it's a work in progress in Sphinx \ud83d\ude16.",
        "PR/Issue Number": "192"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-08-11T20:56:23Z",
        "PR Comment": "Then, I'm happier with the current version that has the indices in the sidebar. \nThanks for looking into it ! ",
        "PR/Issue Number": "192"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-08-12T13:25:20Z",
        "PR Comment": "Alright, I'm happy with the current version. It's not perfect but way better than before, let's merge it and we'll iterate on it after.\nPing @michelolzam ",
        "PR/Issue Number": "192"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-08-12T14:11:17Z",
        "PR Comment": "I think it's really good!\n\nWould be even better with a link in the README or repo description so that people will find it in the first place :-)",
        "PR/Issue Number": "192"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-08-12T15:58:33Z",
        "PR Comment": "Once we are happy with the docs, I'll link to it, thanks!\n\nLe mer. 12 ao\u00fbt 2020 \u00e0 16:11, Jonas Haag <notifications@github.com> a\n\u00e9crit :\n\n> I think it's really good!\n>\n> Would be even better with a link in the README or repo description so that\n> people will find it in the first place :-)\n>\n> \u2014\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mpariente/asteroid/pull/192#issuecomment-672895146>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AEND2HEYXNNAO4T7SWEVK5LSAKPJNANCNFSM4P2YRZVQ>\n> .\n>\n",
        "PR/Issue Number": "192"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "asteroid/scripts/asteroid_cli.py",
        "Creation Date": "2020-05-28T21:14:02Z",
        "PR Comment": "The first _real_ pre-trained model is available [here](https://zenodo.org/communities/asteroid-models) with approval of LDC. \n\nLots of things left to do, but this is a start, merging ",
        "PR/Issue Number": "125"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-01T09:53:49Z",
        "PR Comment": "This comment should be before `  self.inter_RNN = DoubleRNN(...)`",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-01T09:53:53Z",
        "PR Comment": "Same here",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-01T15:05:45Z",
        "PR Comment": "```suggestion\n```",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-01T15:08:08Z",
        "PR Comment": "I don't think it's inspired by this repo right? ",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-01T15:08:36Z",
        "PR Comment": "Need to be more explicit. ",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-08T07:52:19Z",
        "PR Comment": "```suggestion\n        rnn_output1, _ = self.rnn1(inp)\n        rnn_output2, _ = self.rnn2(inp)\n        return torch.cat((rnn_output1 * rnn_output2, inp), -1)\n```",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-09T07:30:15Z",
        "PR Comment": "```suggestion\n    \"\"\"MulCat RNN block from [1].\n    \n    Composed of two RNNs, returns ``cat([RNN_1(x) * RNN_2(x), x])``.\n```\n",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-09T07:30:27Z",
        "PR Comment": "Need to add reference, as done in other models. ",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-09T07:32:52Z",
        "PR Comment": "That doesn't look right. Why did you do that? ",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-09T07:59:54Z",
        "PR Comment": "I think we just add whatever model we just want to test with jit here, no?",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-09T09:36:04Z",
        "PR Comment": "We need to keep all the tests, otherwise we don't know when we break things. ",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-09T09:36:55Z",
        "PR Comment": "I added them back",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-10T09:19:02Z",
        "PR Comment": "It's not what I meant. \nI mean to use the `@pytest.mark.parameterize` to test both. \nI'll take care of it.",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-12T14:54:46Z",
        "PR Comment": "```suggestion\n                bidirectional=True,\n```",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-01-21T17:50:37Z",
        "PR Comment": "Great this time, thanks !",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-01-22T19:42:41Z",
        "PR Comment": "@JorisCos do you mind reviewing please? ",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-07T19:35:45Z",
        "PR Comment": "@JunzheJosephZhu ?",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-07T20:52:25Z",
        "PR Comment": "I guess the best way to do it would be combining them into s single object, adding an option for single/doubleRNN and adding a switch statement into the code?\n\nFor example,\nclass singleRNN(...):\n   def init(...,...,mulcat=False)\n   If mulcat:\n       self.inter_RNN = ...\n   else:\n       self.inter_RNN1 =\n       self.inter_RNN2 =\n\nThe code would be somewhat more confusing to readers though\n\n",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-08T07:55:27Z",
        "PR Comment": "Let's keep the code like this for now. \nPlease\n- Rename `DoubleRNN` to `MulCatRNN`\n- Add a description in the docstring. \n- Test the `mul_cat` option in jit_test.py",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-09T03:27:26Z",
        "PR Comment": "It looks like when running the jit test, sudormrf always fails the test. Is this something I need to worry about, or is this unrelated to DPRNN?\nAlso, there's this super weird issue:\n\nThe two lines below would work with torch jit:\n        _return torch.cat((rnn_output1 * rnn_output2, inp), 2)\n        return torch.cat((rnn_output1, inp), -1)_\n\nbut this line throws an error: \n        _return torch.cat((rnn_output1 * rnn_output2, inp), -1)_\nE           torch.jit.TracingCheckError: Tracing failed sanity checks!\nE           Encountered an exception while running the trace with test inputs.\nE           Exception:\nE               The following operation failed in the TorchScript interpreter.\nE               Traceback of TorchScript (most recent call last):\nE               RuntimeError: vector::_M_range_check: __n (which is 18446744073709551615) >= this->size() (which is 3)\n\nI ended up with:\n _return torch.cat((rnn_output1 * rnn_output2, inp), 2)_\nwhich works fine",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-09T09:26:31Z",
        "PR Comment": "Also, do you want to implement multi-stage loss? That was also in the facebook paper.\nI personally would prefer to first include it in my own recipe, since I'm gonna re-write the backbone anyway.",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-09T09:38:06Z",
        "PR Comment": "Eventually, yes, but in the recipe sounds fine. \n\n> since I'm gonna re-write the backbone anyway.\n\nWhat do you mean? ",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-09T09:40:45Z",
        "PR Comment": "I mean I will use DPRNNBlock but not DPRNN for my separator, since the part starting from Conv2D diverge.",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-09T09:55:18Z",
        "PR Comment": "Alright. \nCan you fix the other issues I mentioned so that we can merge? ",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-09T15:15:18Z",
        "PR Comment": "Ok, I'll do it ASAP. Btw, how do you write test cases for dataset objects? Can I just write if __name__ == \"__main__\" in my recipe?",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-09T15:40:47Z",
        "PR Comment": "We don't have tests for datasets.. Which is a large limitation. ",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-10T08:18:28Z",
        "PR Comment": "I just finished my work with variable speaker wsj0mix dataset in my recipe folder. Should I start a PR yet?",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-10T09:20:41Z",
        "PR Comment": "I have no clue why it's not passing the test_save_and_load_dprnn. Do you have any idea?",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-10T09:21:01Z",
        "PR Comment": "The loading is failing. \n\nWe need to test the mulcat version, but still keep the old tests. For that, we can use `@pytest.mark.parameterize`. \n\nRegarding the recipe, yes, you can make a PR :smiley:  Thanks",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-10T09:21:55Z",
        "PR Comment": "Because `use_mulcat` is not returned in `get_config` (as I mentioned before) so the new model doesn't use it. ",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-10T09:23:45Z",
        "PR Comment": "ok",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-10T11:00:38Z",
        "PR Comment": "Hi, I'm starting to write the model class. I noticed that in all your models that are in the source code just use make_optimizer, but those in the recipe define make_model_and_optimizer. Do I have to follow this?\nAlso, why do the models in the source code not have load_best_model function?",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-10T11:22:05Z",
        "PR Comment": "No, you don't have to. \nThe most important is that loading the model for eval is easy. ",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-12T10:29:37Z",
        "PR Comment": "how do i write test cases for models in my recipe?\nAlso, github send me an email everyday telling me the version consistency check failed. I have no clue what it means",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-12T14:02:34Z",
        "PR Comment": "> how do i write test cases for models in my recipe?\n\nThey aren't tested if they are in the recipe folder. \n\n> Also, github send me an email everyday telling me the version consistency check failed. I have no clue what it means\n\nSorry about that, I don't receive those e-mails.. Anybody else receives those e-mails? ",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-12T14:59:37Z",
        "PR Comment": "I\n- Fixed the jit tests\n- Parameterize model test with `use_mulcat`\n- Restore always bidirectional IntraRNN\n- Removed the recipe files (which should be added to another branch). \n\nThis is ready for merging on my side. \nNext time, don't make PRs from your master branch please :wink: ",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-13T03:22:35Z",
        "PR Comment": "---------- Forwarded message ---------\nFrom: Joseph <notifications@github.com>\nDate: Sat, Feb 13, 2021 at 8:11 AM\nSubject: [JunzheJosephZhu/asteroid] Run failed: Version consistency -\nmaster (c6ef670)\nTo: JunzheJosephZhu/asteroid <asteroid@noreply.github.com>\nCC: Ci activity <ci_activity@noreply.github.com>\n\n\n\n[image: GitHub] [JunzheJosephZhu/asteroid] Version consistency workflow run\n\n  Version consistency: Some jobs were not successful\n\nView workflow run\n<https://github.com/JunzheJosephZhu/asteroid/actions/runs/562583919>\n\n[image: CI (3.6, 1.6.0)]\n\n*Version consistency* / CI (3.6, 1.6.0)\nCancelled\n[image: annotations for Version consistency / CI (3.6, 1.6.0)] 2\n<https://github.com/JunzheJosephZhu/asteroid/actions/runs/562583919>\n[image: CI (3.6, 1.7.0)]\n\n*Version consistency* / CI (3.6, 1.7.0)\nCancelled\n[image: annotations for Version consistency / CI (3.6, 1.7.0)] 2\n<https://github.com/JunzheJosephZhu/asteroid/actions/runs/562583919>\n[image: CI (3.6, nightly)]\n\n*Version consistency* / CI (3.6, nightly)\nFailed in 1 minute and 47 seconds\n[image: annotations for Version consistency / CI (3.6, nightly)] 1\n<https://github.com/JunzheJosephZhu/asteroid/actions/runs/562583919>\n\n\n\n\u2014\nYou are receiving this because this workflow ran on your branch.\nManage your GitHub Actions notifications\n<https://github.com/settings/notifications>\n\n\nGitHub, Inc. \u30fb88 Colin P Kelly Jr Street\n<https://www.google.com/maps/search/88+Colin+P+Kelly+Jr+Street++San+Francisco,+CA+94107?entry=gmail&source=g>\n\u30fbSan Francisco, CA 94107\n<https://www.google.com/maps/search/88+Colin+P+Kelly+Jr+Street++San+Francisco,+CA+94107?entry=gmail&source=g>\n\n-- \nJoseph Zhu\n",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-13T09:49:59Z",
        "PR Comment": "Not sure.. ",
        "PR/Issue Number": "416"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-04T14:18:24Z",
        "PR Comment": "Adding a `self.activation = activations.get(activation)`  and `self.norm = norm_type` could save space and makes things a bit clearer ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-12-08T21:30:38Z",
        "PR Comment": "```suggestion\n        return self.samplerate\n```",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-12-08T21:47:37Z",
        "PR Comment": "Thanks. We'll have to pass `sample_rate` to `BaseModel` and remove that part anyway, but in the mean time, at least it makes sense, thanks. ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-02T18:42:11Z",
        "PR Comment": "but activation must be different for each MLP block\n",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-04T10:49:01Z",
        "PR Comment": "Named after the Matlab function ?  ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-04T10:49:12Z",
        "PR Comment": "I wonder if it should expect batch, mic_channels, seq_len to keep having the same input format everywhere",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-04T10:49:34Z",
        "PR Comment": "LibriSpeech/test-clean",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-04T11:37:58Z",
        "PR Comment": "Yes, I think that would be much better! ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-05T10:20:31Z",
        "PR Comment": "maybe, i named that way only because it sounds cooler i did not think about MATLAB",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-05T10:22:11Z",
        "PR Comment": "Agree. What do you think that right now it does not compute all possible pairs when both inputs are multi-channel ? We do not need that functionality right now but we might need it in future. ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-05T11:51:41Z",
        "PR Comment": "I guess that's fine for now. Probably by using broadcasting it can be achieved quite cheap. ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-05T11:52:00Z",
        "PR Comment": "It sounds cool! :smiley: ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-05T14:14:15Z",
        "PR Comment": "Can you add a docstring to say what valid_mics is please? ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-05T14:25:43Z",
        "PR Comment": "Same here, I don't know what is `valid_mics`.",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-05T14:26:04Z",
        "PR Comment": "Let's remove that. ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-05T14:29:03Z",
        "PR Comment": "We'll need docs here. ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-05T14:29:45Z",
        "PR Comment": "Maybe this description goes in the docstring, and we call it something smaller? \nThe name will be used as a tag in the HF's hub.  ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-05T14:32:52Z",
        "PR Comment": "So, we're missing this, right? ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-05T14:34:35Z",
        "PR Comment": "This is unused. \nI understand that we would want to limit the confusion between conf args and bash args, but here, there is no way to have several config files.\n\nLet's add an argument for that in the train file. ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-05T14:35:12Z",
        "PR Comment": "Pass conf file from bash and load here. ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-05T21:34:25Z",
        "PR Comment": "good catch thanks",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-05T21:34:43Z",
        "PR Comment": "no i forgot to re-comment it back. It is working ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-05T21:35:05Z",
        "PR Comment": "TACDataset ? \n",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-05T21:35:48Z",
        "PR Comment": "I need a linter which checks for ipdb",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-06T00:02:17Z",
        "PR Comment": "added",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-08T15:12:06Z",
        "PR Comment": "Do you agree that  \"Input signal should not be shorter than the ref signal.\" was wrong? ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-08T15:12:56Z",
        "PR Comment": "`input` is a built-in so I replaced by `inp`",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-08T15:26:36Z",
        "PR Comment": "I wonder why not adding this is asteroid/data? \nIs there a reason? Do you feel it's too recipe specific? ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-08T15:45:32Z",
        "PR Comment": "I misunderstood something. \nI thought that you wanted to pass config files directly, instead of the usual way, and that the conf file could be passed in run.sh? ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-08T16:53:51Z",
        "PR Comment": "If we don't have a default value, we cannot use it in the inference CLI. \n\nIf there is no `valid_mics`, we consider all recordings to have the max number of mics. \n@popcornell , can you validate that this is ok? ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-08T17:01:57Z",
        "PR Comment": "Yes this is a sensible default",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-08T17:02:47Z",
        "PR Comment": "That did not work for some reason. Reverting to standard approach ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-08T17:03:46Z",
        "PR Comment": "Cool thanks. ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-08T17:05:43Z",
        "PR Comment": "This dataset is problematic if you remember due to lack of spatial diversity in mics and the limited noise types.\nI would not add it to the toolkit IMO. ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-08T17:06:24Z",
        "PR Comment": "yes missing the not\n",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-08T17:28:05Z",
        "PR Comment": "Ok, cool",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-04T08:38:19Z",
        "PR Comment": "Cool, thanks !\n\n> IMO in future we will have to refactor and re-organize the whole masknn\n\nCan you explain why, in your opinion, please? \n\n5. Tests missing (TODO)",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-04T08:44:50Z",
        "PR Comment": "Another thing: I know that if we merge this without squashing, the binary files will be in the git history,  even if removed from the PR. This would be problematic because they are quite heavy. \n\nBut, I'm not sure what happens if we squash. My intuition is that they won't be in history. I know @iver56 has some knowledge about this, do you know about this particular case? ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-04T09:10:47Z",
        "PR Comment": "> \n> \n> Another thing: I know that if we merge this without squashing, the binary files will be in the git history, even if removed from the PR. This would be problematic because they are quite heavy.\n> \n> But, I'm not sure what happens if we squash. My intuition is that they won't be in history. I know @iver56 has some knowledge about this, do you know about this particular case?\n\nI'm not an expert on this topic, but I think if you squash the commits (where one of them added a file and a later one removed it again), the squashed commit does not include the file. So I think if you include only the squashed commit, and discard the original, offending commits, the repository won't contain the big file. Maybe `git gc` is needed for pruning loose objects. You can check the repository size at https://api.github.com/repos/mpariente/asteroid",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-04T09:21:09Z",
        "PR Comment": "Thanks a lot for the feedback and resources Iver ! ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-04T09:26:32Z",
        "PR Comment": "Your call really IMO if we squash there should not be in the history as long as I remove them.  If we wanna be sure i can make another pull request. \n\nSure,  IMO we have to be more modular and distinguish between models and building blocks. \nFor example: in `attention.py` there is DPTNet and is imported and wrapped in `models`. \nI think in attention.py only building blocks should be included. And i would rename masknn to nnet or  blocks or smthing like that. \nI would put both DPTNet and DPTAsNet in models. ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-04T12:05:57Z",
        "PR Comment": "> Your call really IMO if we squash there should not be in the history as long as I remove them. If we wanna be sure i can make another pull request.\n\nLet's keep it that way. I think it'll be ok. \n\nYou say that mask nets should be considered as models, it makes sense. \nI don't have a clear idea of how to organize it better, or why it is currently limiting. I'm happy to discuss about that.",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-04T14:27:07Z",
        "PR Comment": "What do you think about the NCC module we move it to DSP ? ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-04T14:50:21Z",
        "PR Comment": "> What do you think about the NCC module we move it to DSP ?\n\nIMO yes ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-04T14:52:54Z",
        "PR Comment": "Also keep in mind this is the first step towards Multi-Channel support so we may want also to start to think about how to organize the toolkit also to support multi-channel separation and enhancement algorithms and building blocks. ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-10T10:42:31Z",
        "PR Comment": "@popcornell do you feel like writing simple docstrings on the parts in the source code? Reviewing will be easier from there. ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-10T17:26:40Z",
        "PR Comment": "Yes but i have limited time available this week ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-02T14:29:20Z",
        "PR Comment": "/lint",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-02T14:36:24Z",
        "PR Comment": "/lint",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-02T18:56:01Z",
        "PR Comment": "Added docstrings, removed .pkl config files. Added comments, added a dsp.spatial module with fast multi-channel cross-correlation. ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-04T09:32:52Z",
        "PR Comment": "Great! \nLet's merge master into the branch because this is a mess to review. ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-05T10:25:43Z",
        "PR Comment": "> We need tests for the model and the xcor function\n\nit is at -9.3 on the multichannel dataset. epoch 36\nBoth are working quite well ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-05T11:50:32Z",
        "PR Comment": "Joris meant unit tests, to make sure we don't break things when we edit the files next time. ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-05T21:38:52Z",
        "PR Comment": "> Joris meant unit tests, to make sure we don't break things when we edit the files next time.\n\nyeah i know but I hate them, adding some basic tests . However I need to get creative for xcorr one",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-06T00:04:20Z",
        "PR Comment": "> I wonder if the padding to max_mics couldn't be done in the network instead of in the dataloader? WDYT?\nYou can't because you have to pad in order to batch examples with different number of mics.",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-06T18:29:03Z",
        "PR Comment": "Yeah, I realized that after I asked the question, thanks. ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-06T18:29:37Z",
        "PR Comment": "Re-request my review when you're done please",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-08T15:55:11Z",
        "PR Comment": "\\rebase",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-08T16:01:40Z",
        "PR Comment": "/rebase",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-08T17:06:05Z",
        "PR Comment": "Also, the model currently only supports 3D inputs, which won't work with inference. \nI don't know what to do about that. \nIn `BaseEncoderMaskerDecoder`, we have these three funcs to handle input shapes in a jitable way, should we also integrate in `FasNetTAC`?\nIMO, we can merge like this now and see if somebody can work on the jitability afterwards, maybe then, move these shape related stuff into `BaseModel` which can be useful in other models. ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-08T17:19:31Z",
        "PR Comment": "I think there is a confusion in the `enc_dim` and `feature_dim` because if I change one without the other, the forward doesn't work. ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-08T17:34:24Z",
        "PR Comment": "Great, the problem seems to be solved for `feature_dim`, there is still a problem with `enc_dim` though.. ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-08T17:58:54Z",
        "PR Comment": "Now should be solved. I extended the test also ",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-08T18:24:27Z",
        "PR Comment": "GREAT !",
        "PR/Issue Number": "306"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-07T19:25:23Z",
        "PR Comment": "\ud83d\udc4d ",
        "PR/Issue Number": "432"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-07T19:27:09Z",
        "PR Comment": "How did you find it? Test failure?",
        "PR/Issue Number": "433"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-07T19:30:12Z",
        "PR Comment": "Unexpected warning in `BaseModel` with the new mechanism",
        "PR/Issue Number": "433"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-07T08:58:40Z",
        "PR Comment": "```suggestion\n                \"The argument `sample_rate` of `BaseModel` will be required in the future. \"\n```",
        "PR/Issue Number": "431"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-07T08:59:07Z",
        "PR Comment": "How does it look now @jonashaag ?",
        "PR/Issue Number": "431"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-07T10:30:56Z",
        "PR Comment": ":+1:",
        "PR/Issue Number": "431"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-06T22:35:12Z",
        "PR Comment": "Positional and having a default are orthogonal concepts. I think the wording should be: \u201cwill be required argument in the future.\u201d\n\nAlso, is it safe to remove the backwards compat SR table lookups now? (I am not up to date on that front)",
        "PR/Issue Number": "431"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-07T08:56:47Z",
        "PR Comment": "> Positional and having a default are orthogonal concepts. I think the wording should be: \u201cwill be required argument in the future.\u201d\n\nThanks.\nI was thinking about the wording and I was sure I messed it up :wink: \n\n> Also, is it safe to remove the backwards compat SR table lookups now? (I am not up to date on that front)\n\nNo, the only model that has 16k FS is DeMask, which is not on HF's hub yet (@popcornell ? ^^) ",
        "PR/Issue Number": "431"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-02T21:05:50Z",
        "PR Comment": "I don't think this needs to be a property as the `sample_rate` but we could do it. ",
        "PR/Issue Number": "427"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-02T21:08:22Z",
        "PR Comment": "Should we add a flag to ignore that, if passed, make us ignore that and take the first channels or something? \nSomething that would be passed from the CLI to here (`--ignore-channels-check`).\nI'm not sure it's useful. ",
        "PR/Issue Number": "427"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-02T21:08:55Z",
        "PR Comment": "```suggestion\n    # Pass wav as [batch, n_chan, time]; here: [1, chan, time]\n```",
        "PR/Issue Number": "427"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-02T21:10:38Z",
        "PR Comment": "As said in the PR. We must have the `sample_rate` as argument. \n\nIf we want fixed number of channels, we don't need it in the `__init__`, we just `super(n_channels=2)` and that works. ",
        "PR/Issue Number": "427"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-02T23:35:14Z",
        "PR Comment": "why not ? some models are tied to the number of channels and actually to the array topology\n",
        "PR/Issue Number": "427"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-03T08:48:09Z",
        "PR Comment": "For sample_rate, we made it like that because the model holds reference to the sample_rate, but the filterbank as well, so we wanted the raise the warning when setting it. \n\nBut for the number of channels, for now nothing holds reference to it. \nIf we see it's a limitation in the future we can always write a setter/getter. \n\nAsteroid, as Python, is for consenting adults :wink: ",
        "PR/Issue Number": "427"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-03T11:42:46Z",
        "PR Comment": "Not sure...",
        "PR/Issue Number": "427"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-03T12:16:41Z",
        "PR Comment": "@popcornell what's your opinion on that? \nMaybe we can start by not having it. And if we find it useful later, or there is a user demand, we can change that. ",
        "PR/Issue Number": "427"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-02T21:14:55Z",
        "PR Comment": "Another note: there will be several scenarios for `LambdaOverlapAdd`:\n- Multichannel input, single output (should work fine)\n- Multichannel input, multichannel output (not sure it works). \n\nWe should add some tests and if the second case doesn't work, raise a useful error. ",
        "PR/Issue Number": "427"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-03T11:40:58Z",
        "PR Comment": "> This can be serialized, but not loaded because `sample_rate` is needed in the model conf to load the model.\n\nHow about moving the check for missing sample rate to *after* the model object has been constructed, and then checking using `hasattr(model, \"sample_rate\")`? That way you are free to set the `sample_rate` property however you like as long as it's present.",
        "PR/Issue Number": "427"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-03T12:15:45Z",
        "PR Comment": "> > This can be serialized, but not loaded because `sample_rate` is needed in the model conf to load the model.\n> \n> How about moving the check for missing sample rate to _after_ the model object has been constructed, and then checking using `hasattr(model, \"sample_rate\")`? That way you are free to set the `sample_rate` property however you like as long as it's present.\n\nI thought about that. \nThat seems fine to me, let's do that. ",
        "PR/Issue Number": "427"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-03T20:36:36Z",
        "PR Comment": ">  How about moving the check for missing sample rate to after the model object has been constructed, and then checking using hasattr(model, \"sample_rate\")? That way you are free to set the sample_rate property however you like as long as it's present.\n\n`sample_rate` has a default value, so actually this won't work because the `sample_rate` property will be there. ",
        "PR/Issue Number": "427"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-05T12:49:19Z",
        "PR Comment": "How about we drop it? It's backwards incompatible, but loading models will still work, and it's easy to fix for people. Maybe it's time we don't default to 8 kHz anymore now that people are using Asteroid for other things than traditional 8 kHz speech separation ",
        "PR/Issue Number": "427"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-05T13:06:40Z",
        "PR Comment": "Well, I'd be ok with that! ",
        "PR/Issue Number": "427"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-02-06T21:09:41Z",
        "PR Comment": "This is enough for this PR. \nAfter merging this, I'll create a PR to remove the default on the sample rate. ",
        "PR/Issue Number": "427"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-01-23T18:19:44Z",
        "PR Comment": "It took time to find out what the bug was because those tests were not clear enough. \nLet's try to improve it: \n- Pass everything to `make_enc_dec` as kwargs, this is unclear currently.\n- Add a `n_fft` variable, and reference `n_fft + 2` in the `istft` to be clear. ",
        "PR/Issue Number": "406"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-01-23T18:20:17Z",
        "PR Comment": "Same here, name kwargs + introduce `n_fft`. ",
        "PR/Issue Number": "406"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-01-05T19:33:13Z",
        "PR Comment": "There is a problem with CI (1.7.0 build) that might be related to the stride (changed input shape), could someone have a look? \n\nThe other STOI problem on the nightly build _should_ be fixed now. ",
        "PR/Issue Number": "406"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-01-08T14:47:05Z",
        "PR Comment": "We can have a closer look to what's wrong with DCCRNet @jonashaag ",
        "PR/Issue Number": "406"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-01-22T19:43:53Z",
        "PR Comment": "Could you explain the fix please? What was wrong? ",
        "PR/Issue Number": "406"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-01-23T16:37:19Z",
        "PR Comment": "Sure, I added `stft_n_filters` in DCUNet and DCCRNet. I also changed the default values of `stft_n_filters` `stft_n_kernel_size` and `stft_stride`. In the tests the models are initialized with the default values and the tests use hard-coded values tied to those default parameters, so they needed to be changed. ",
        "PR/Issue Number": "406"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-01-23T16:40:36Z",
        "PR Comment": "At first, I was confused by the jit tests on DCCRNet that kept failing, but it was because I didn't change this line \n` masknet_kwargs.setdefault(\"n_freqs\", stft_n_filters // 2)` . ",
        "PR/Issue Number": "406"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-01-23T16:43:31Z",
        "PR Comment": "Before, because ` stft_n_filters` was equal to ` stft_kernel_size` ` masknet_kwargs.setdefault(\"n_freqs\", stft_kernel_size // 2)` was ok but it had to be changed ",
        "PR/Issue Number": "406"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-01-23T18:15:34Z",
        "PR Comment": "Makes complete sense, thanks for the explanation! ",
        "PR/Issue Number": "406"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-01-25T10:56:21Z",
        "PR Comment": "Thanks again ! ",
        "PR/Issue Number": "406"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-01-05T14:05:46Z",
        "PR Comment": "Thanks!\n\nWe should add a test. (We should have added a test when we added Large-DCUNet-20...)",
        "PR/Issue Number": "405"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2021-01-05T20:22:29Z",
        "PR Comment": "/rebase",
        "PR/Issue Number": "405"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-12-04T23:59:23Z",
        "PR Comment": ":joy: :joy: :joy: ",
        "PR/Issue Number": "377"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-12-05T00:16:21Z",
        "PR Comment": "We'll keep `hf_get_from_cache` because we'll drop Zenodo support as soon as our models are fully migrated to HuggingFace's hub. \nAnd we'll add a note about this behaviour in the docstring above. \nThanks for the note! ",
        "PR/Issue Number": "377"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-12-05T10:47:50Z",
        "PR Comment": "Did you know `model_id, revision = filename_or_url.split(\"@\")`? :) (assuming exactly 1 `@`)",
        "PR/Issue Number": "377"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-12-05T10:56:06Z",
        "PR Comment": "Can you tell why the custom header?",
        "PR/Issue Number": "377"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-12-05T11:02:13Z",
        "PR Comment": "Not a change request but just a FYI for the curious reader :-) \u2013 this would be much nicer using `pathlib`:\n\n```py\nmatching_files =  [f.name for f in cache_dir.glob(cache_path.with_suffix(\".*\").name)\n                   if f.suffix not in {\".json\", \".lock\"}]\n```",
        "PR/Issue Number": "377"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-12-07T10:14:31Z",
        "PR Comment": "True!",
        "PR/Issue Number": "377"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-12-07T10:17:50Z",
        "PR Comment": "In case of an LFS file (i.e. where the HTTP request does not return the file's content directly, but a redirect to a Cloudfront URL), our server uses `\"X-Linked-Etag\"` to include the `sha256` of the actual linked file (the large file itself). \n\nIt made more sense to us to use this hash (which we already have and don't have to compute again, as it can be very costly for super large files), but then it's not really the Etag of the redirect response itself.\n\nWe could probably document this better at some point.",
        "PR/Issue Number": "377"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-12-07T17:22:14Z",
        "PR Comment": "Let's remove this note.  \n```suggestion\n```",
        "PR/Issue Number": "377"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-12-07T17:23:45Z",
        "PR Comment": "Let's assume this is tested in HF, we'll test it later if we have issues with it. ",
        "PR/Issue Number": "377"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-12-05T00:23:18Z",
        "PR Comment": "Thank you so much for this @julien-c, this is really exciting!\n\n> If it's too much code, feel free to remove/update some of it. We could also spin this code off into a utility library (`pip install huggingface_hub`?) at some point.\n\nThis would make complete sense at some point, but the amount of copy/paste is fine, we'll keep everything. \n\nWe need to somehow be able to maintain that code so I'll have to read it carefully, I don't grasp everything yet :upside_down_face: ",
        "PR/Issue Number": "377"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-12-05T11:05:58Z",
        "PR Comment": "Looks very good to me",
        "PR/Issue Number": "377"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-12-05T11:08:17Z",
        "PR Comment": "What about uploads? \ud83e\udd14",
        "PR/Issue Number": "377"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-12-05T11:46:56Z",
        "PR Comment": "You create a repo on the hub's page, clone it and push to it what you want, no fancy CLI required. \n\n![image](https://user-images.githubusercontent.com/18496796/101241604-dbf4af00-36f7-11eb-9003-7642a8994a37.png)\n",
        "PR/Issue Number": "377"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-12-07T10:12:18Z",
        "PR Comment": "re. uploads: yes. In `transformers` we have programmatic ability to create (and even delete) model repos, which we could also spin off into the same small utility-focused library at some point. \n\nBut the design goal is to be able to upload models using just `git + git-lfs` so that it's quite independent from library implementations.\n\nThe one thing that's not supported out of the box on the upload side is upload of files larger than 5GB: you need a custom lfs transfer agent that's currently bundled to `transformers` (and in the future in a separate library). That's quite a big model size though so should be rare.",
        "PR/Issue Number": "377"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-25T18:59:51Z",
        "PR Comment": "I thought you'd like to debate that @jonashaag.\nIt's very unlikely that an asteroid tensor will have length 2 in it's last dimension, however very possible that a torchaudio tensor has even shape or dim -2. That's why we should default to torchaudio style IMO. ",
        "PR/Issue Number": "358"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-25T18:59:53Z",
        "PR Comment": "Actually, not a ValueError.",
        "PR/Issue Number": "358"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-25T19:01:46Z",
        "PR Comment": "```python\nIn [9]: conv1d(torch.randn(1), torch.randn(1))\n---------------------------------------------------------------------------\nRuntimeError                              Traceback (most recent call last)\n<ipython-input-9-77ce17263db7> in <module>\n----> 1 conv1d(torch.randn(1), torch.randn(1))\n\nRuntimeError: weight should have at least three dimensions\n\nIn [10]: conv1d(torch.randn(1), torch.randn(1, 1, 1))\n---------------------------------------------------------------------------\nRuntimeError                              Traceback (most recent call last)\n<ipython-input-10-b74bee98ca1e> in <module>\n----> 1 conv1d(torch.randn(1), torch.randn(1, 1, 1))\n\nRuntimeError: Expected 3-dimensional input for 3-dimensional weight [1, 1, 1], but got 1-dimensional input of size [1] instead\n\nIn [11]: conv1d(torch.randn(11, 2, 3), torch.randn(1, 1, 1))\n---------------------------------------------------------------------------\nRuntimeError                              Traceback (most recent call last)\n<ipython-input-11-3f5f81e79961> in <module>\n----> 1 conv1d(torch.randn(11, 2, 3), torch.randn(1, 1, 1))\n\nRuntimeError: Given groups=1, weight of size [1, 1, 1], expected input[11, 2, 3] to have 1 channels, but got 2 channels instead\n```",
        "PR/Issue Number": "358"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-25T19:18:59Z",
        "PR Comment": "I'd be in favour of removing it completely as it will be confusing if it works from mag and phase or from real and imag. \nAnd using either of `torch_complex_from*` will be more explicit.",
        "PR/Issue Number": "358"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-25T19:55:49Z",
        "PR Comment": "Or rather, rename it to `torch_complex_from_reim`?",
        "PR/Issue Number": "358"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-25T20:03:50Z",
        "PR Comment": "Hmm... I'm not sure what's the advantage of handling this case. The idea of this generic conversion function was that if you write some code (say a library) that uses complex numbers, you can accept any type of complex representation. So you don't have to know the representation upfront.\n\nIf you know upfront in the library what type of tensor you have then you can do the conversion directly without this function.\n\nIf you don't know what you have in the library, then IMO the library should complain to its user that it got input that it didn't understand, which is what the current code does.",
        "PR/Issue Number": "358"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-25T20:17:25Z",
        "PR Comment": "I knew you would disagree hahah \nAs we discussed. Let's remove this function entirely and add `to_torch_complex` is `asteroid-filterbanks`.",
        "PR/Issue Number": "358"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-26T14:49:01Z",
        "PR Comment": "Here. ",
        "PR/Issue Number": "358"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-26T14:49:08Z",
        "PR Comment": "Here",
        "PR/Issue Number": "358"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-26T14:49:38Z",
        "PR Comment": "Needed to install. Otherwise the CLI didn't work. Don't know why. ",
        "PR/Issue Number": "358"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-25T20:59:19Z",
        "PR Comment": "\\rebase",
        "PR/Issue Number": "358"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-20T11:46:53Z",
        "PR Comment": "JIT takes time to startup, so we use `script_if_tracing` instead so that, if necessary, a module/function is scripted when we trace a model, but JIT is not loaded when asteroid is imported. \n\nBesides, I'm not sure I see the point of scripting, but if it's scriptable, we can add it :wink: ",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-20T12:21:46Z",
        "PR Comment": "Very clear. ",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-20T12:22:13Z",
        "PR Comment": "What happened here? ",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-20T12:23:10Z",
        "PR Comment": "Is it possible to make \"mini\" architectures for this in their respective files? For tests, demos on collab etc.. That would be cool. ",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-20T12:25:19Z",
        "PR Comment": "Oh, I'll need to remove that after this is merged.. ",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-20T12:26:04Z",
        "PR Comment": "Ohh great that this is passing !",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-20T12:26:51Z",
        "PR Comment": "Can you explain the new shapes please? \nIt's to give the name number of frames of STFT but have different wav size? Or what is the motivation? ",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-20T12:27:41Z",
        "PR Comment": "Better test if there are two layers I guess\n```suggestion\n            \"n_layers\": 2,\n```\n",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-20T13:03:00Z",
        "PR Comment": "OK I'm not very familiar with all of this. I just added this to make the tests pass \ud83d\ude05 Please change to whatever is better!",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-20T13:03:57Z",
        "PR Comment": "It was bad in the initial implementation; the subclasses override this attribute and it doesn't make sense to have it in the parent class IMO",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-20T13:04:22Z",
        "PR Comment": "Makes sense, I will try",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-20T13:07:08Z",
        "PR Comment": "The problem is that DCUNet only works with certain shapes (T - 1 must be divisible by 16). I found these by trial and error. It's the same shapes as elsewhere + 4500.",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-20T14:12:57Z",
        "PR Comment": "No problem. I didn't know anything about it until recently. \nI'll check what was the error. ",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-20T14:17:29Z",
        "PR Comment": "Ok, thanks. This is what I thought. \nWould it make sense to handle the \"slicing\" in the model? So that we don't have to be careful about it everywhere else? \n\nI'm worried that these tests pass because the effective input size, after the STFT, is the same. In this case, the scripting unit test is not useful. ",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-20T14:18:20Z",
        "PR Comment": "I'll have a deeper look at that asap",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-20T14:39:44Z",
        "PR Comment": "This is what I had in mind. All the inputs have the same shape once out of the STFT, so this test ensure that if the input has the same shape, scripting keeps consistency. This is already good, but not enough. \nI'll keep digging",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-20T14:49:08Z",
        "PR Comment": "Fixed",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-22T19:18:12Z",
        "PR Comment": "I did it. Have a look if you can. ",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-23T09:15:51Z",
        "PR Comment": "Undecided if this should be called `\"mini\"` only. ",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-23T09:17:07Z",
        "PR Comment": "Probably need better variable names and better docstrings.\n`torch.Size` is not scriptable yet and reshaping cannot be traced because they aren't static, so passing the input is the simple solution. We can do other things but this is just to see if we'd like to have that. ",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-23T09:17:43Z",
        "PR Comment": "Needed to pass this as a `torch.Tensor` for scripting.",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-23T09:18:05Z",
        "PR Comment": "Needed to convert to `int` for scripting. ",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-23T09:19:21Z",
        "PR Comment": "This was 4701 previously. With 5010, it used to fail, now it doesn't. So the scripting reshapes properly, which is cool. ",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-23T18:17:26Z",
        "PR Comment": "Yes, \"mini\" or \"test\" or \"Asteroid-Mini\" or ...\n\nIn any case we should add a comment that this isn't in the paper.",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-23T22:23:10Z",
        "PR Comment": "This is great, and very useful !",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-23T22:23:30Z",
        "PR Comment": "This is very ugly, isn't it?..  ",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-24T07:59:59Z",
        "PR Comment": "It's similar to `librosa.util.fix_length`. I wonder if we should call it something similar, but then it'd be inconsistent with the other names",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-24T08:02:29Z",
        "PR Comment": "I agree, I think I did it this way because there where some argument overriding issues with the DCCRN constructor but I don't remember the details and I'm sure we can also get it to work without the extra level. Would you suggest to add the masknet kwargs to the model kwargs, ie. flat? Seems to least ugly to me. So:\n\n```py\ndef __init__(self, encoders, decoders, **kwargs):\n    ...\n    encoder, decoder = make_enc_dec(...)\n    masker = self.masknet_class.default_architecture(architecture, **kwargs)\n    super().__init__(encoder, masker, decoder)\n```",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-24T08:56:23Z",
        "PR Comment": "Also don't know. \nIt would be ok to change the name of `pad_x_to_y`, if we think of a better one, that unifies those things. ",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-24T08:56:55Z",
        "PR Comment": "Yes, this will be much better IMO. ",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-24T09:04:03Z",
        "PR Comment": "Let's do it later maybe",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-24T09:55:08Z",
        "PR Comment": "Why is `n_src` here as well? ",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-24T09:56:04Z",
        "PR Comment": "Why did the `sample_rate` disappear? ",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-24T10:01:24Z",
        "PR Comment": "```suggestion\ndef torch_version_tuple():\n    version, *suffix = torch.__version__.split(\"+\")\n    return tuple(map(int, version.split(\".\"))) + tuple(suffix)\n```",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-24T10:18:02Z",
        "PR Comment": "```suggestion\n    def __init__(self, encoders, decoders, output_layer=None, mask_bound=\"tanh\", **kwargs):\n```",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-24T10:20:28Z",
        "PR Comment": "I removed all the duplicate params everywhere and kept only the ones we need (`stft_kernel_size` in this case). We can also add it back if you think it's more clear",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-24T11:09:08Z",
        "PR Comment": "Ok, thanks. ",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-24T11:24:42Z",
        "PR Comment": "```suggestion\n```",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-24T11:34:47Z",
        "PR Comment": "Can you have a look at this? \nMaybe this solves the issue you were mentioning? I didn't find the failure on my end. Checking if it works with torch 1.7",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-24T11:42:30Z",
        "PR Comment": "Checking if negative padding works here (trimming and padding in the same function) and solves the 1.7 error",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-24T11:48:17Z",
        "PR Comment": "Cool !",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-24T11:48:51Z",
        "PR Comment": "The issue was somewhere else, in `trim_x_to_y` if both have the same length, but it's fixed now",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-24T11:52:30Z",
        "PR Comment": "I finally saw that, thanks. ",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-26T17:37:16Z",
        "PR Comment": "@kssk16 Note that our LSTM is of size 640 rather than 512 because we're not stripping the Nyquist frequency so have 257 rather than 256 frequency bins.\n\nMaybe we should change this as well so the implementation matches the paper.",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-27T10:33:03Z",
        "PR Comment": "> @kssk16 Note that our LSTM is of size 640 rather than 512 because we're not stripping the Nyquist frequency so have 257 rather than 256 frequency bins.\n> \n> Maybe we should change this as well so the implementation matches the paper.\n\n@jonashaag Thanks for letting me know.",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-27T15:02:40Z",
        "PR Comment": "More differences:\n\n- ~~They use PReLu, not Leaky ReLu~~\n- ~~They use (2, 1) padding for all encoders and (2, 0) padding for all decoders~~\n- ~~In the output layer they use output_padding=(1, 0)~~\n- They use a window of size 400, pad it (centered) to 512 and then use a 512 FFT. We don't do the 400 thing.",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-02T15:24:45Z",
        "PR Comment": "Note: New WIP version here https://github.com/jonashaag/asteroid/blob/b053ed67806da48270742ff01202d158a3faaef8/asteroid/masknn/recurrent.py#L549 https://github.com/jonashaag/asteroid/blob/b053ed67806da48270742ff01202d158a3faaef8/asteroid/models/dccrnet.py ",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-19T10:11:37Z",
        "PR Comment": "OK, this should be ready to review.\n\nThe DCCRN implementation isn't 100% identical to the paper one, but very similar. Differences I know of: using 512 FFT instead of 400 + 2 * 56 zero padding; slightly different padding in T dimension.\n\nWhile fixing the DCCRN implementation I realized that you don't need the `intermediate_layer` concept because you can simply replace it by an \"asymmetric\" u-net structure where the deepest layer's \"partner\" is the identity. In fact, the `intermediate_layer` concept doesn't actually fit the DCCRN architecture, so I removed it.\n\nI also included a fix to the DCUNet architectures that I realized was wrong.\n\nIn general, I'd appreciate if someone could compare my implementations to the papers because I'm quite unsure if there are more differences that I didn't spot. Code can be found here https://paperswithcode.com/paper/dccrn-deep-complex-convolution-recurrent-1 https://paperswithcode.com/paper/phase-aware-speech-enhancement-with-deep-1\n\nCommit fc0232cdf9892de50ecdaff23183da293776ccf4 is sort of unrelated, we can exclude it.",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-19T11:31:59Z",
        "PR Comment": "Maybe @kssk16 @huyanxin @sweetcocoa and @chanil1218 would like to have a look? That would be nice!",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-20T14:48:32Z",
        "PR Comment": "If I print in the BaseUNet's forward in this way\n```python\n    def forward(self, x):\n        enc_outs = []\n        for idx, enc in enumerate(self.encoders):\n            x = enc(x)\n            enc_outs.append(x)\n            print(f\"Encoding {idx}\", x.shape)\n        for idx, (enc_out, dec) in enumerate(zip(reversed(enc_outs[:-1]), self.decoders)):\n            x = dec(x)\n            print(f\"Decoding {idx}\", x.shape)\n            x = torch.cat([x, enc_out], dim=1)\n        return self.output_layer(x)\n```\n\nI get\n```\nprint(tf_rep.shape) torch.Size([1, 256, 36])\nEncoding 0 torch.Size([1, 16, 128, 35])\nEncoding 1 torch.Size([1, 32, 64, 34])\nEncoding 2 torch.Size([1, 64, 32, 33])\nEncoding 3 torch.Size([1, 128, 16, 32])\nEncoding 4 torch.Size([1, 128, 8, 31])\nEncoding 5 torch.Size([1, 128, 4, 30])\nEncoding 6 torch.Size([1, 128, 4, 30])\nDecoding 0 torch.Size([1, 128, 4, 30])\nDecoding 1 torch.Size([1, 128, 8, 31])\nDecoding 2 torch.Size([1, 128, 16, 32])\nDecoding 3 torch.Size([1, 64, 32, 33])\nDecoding 4 torch.Size([1, 32, 64, 34])\nDecoding 5 torch.Size([1, 16, 128, 35])\n```\n\nwhere the time dimension is not divided by two at every iteration, but just looses one. Is this intended? At least this doesn't seem consistent with the docstring and also your comments that suggest that the time dim has to be divisible by the prod of strides. Are the strides on both freq and time dimension? \n\nBy the way, for DCCRNet, the jit test passes even with different size, which is great news !\n",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-20T18:04:17Z",
        "PR Comment": "Could it be that you confused DCUNet and DCCRNet here?\n\n```\n$ python -c 'import asteroid.models as m, torch; m.DCUNet(\"DCUNet-10\")(torch.randn(1,50000))'\nEncoding 0 torch.Size([1, 32, 129, 97])\nEncoding 1 torch.Size([1, 64, 65, 49])\nEncoding 2 torch.Size([1, 64, 33, 25])\nEncoding 3 torch.Size([1, 64, 17, 13])\nEncoding 4 torch.Size([1, 64, 9, 13])\nDecoding 0 torch.Size([1, 64, 17, 13])\nDecoding 1 torch.Size([1, 64, 33, 25])\nDecoding 2 torch.Size([1, 64, 65, 49])\nDecoding 3 torch.Size([1, 32, 129, 97])\n...\n```\n\nThe paddings are different in DCUNet. In DCCRNet we use the \"official\" padding (or very similar), that is, the encoders each lose 1 frame in the T dim and the decoders add it back using output padding.\n\nIn DCUNet, there is not official implementation available, so I used what's most common with other implementations, which seems to be padding so that for each encoder, `T -> (T+1)/2` roughly, for example `17 -> 9 -> 5 -> 3 -> 2 -> 2`. We can also use some other padding, I'm not an expert in u-nets (not expert in anything in deep learning really \ud83d\ude05)",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-20T18:45:25Z",
        "PR Comment": "It is completely possible, yes ! \nI'm not an expert in either of these architectures and didn't read the papers in detail recently. \n\nGiven that DCCRNet is much more flexible, I guess it makes sense to isolate the tests of DCUNet, right? \nI'll do that",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-20T19:45:44Z",
        "PR Comment": "IMO, this should be good. \n\nI found the correct durations for DCUNet by hand as well, so we test 3 shapes and the traced model is consistent, which is great ! \n\nFew things:\n- Having to guess input shape is very bad, and the error message is half helpful because it is in the frequency domain, so it doesn't directly help to get the right shape in the time domain. How can we improve that? Do we want to improve that? \n- Those tests are pretty slow, so it would be nice to have \"mini\" architectures. \n\n![image](https://user-images.githubusercontent.com/18496796/99842909-f57eee00-2b70-11eb-9cd4-a60079ba2d8d.png)\n\nExtending DCCRNet to separation shouldn't be too hard, we just need to overwrite the second entry of the last line in the architecture file that is past to the complex conv, right. So we could easily add a `n_src` arg to it and enable separation. Am I missing something? \n\n![image](https://user-images.githubusercontent.com/18496796/99843080-3e36a700-2b71-11eb-8c84-76f725ba7498.png)\n",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-22T19:20:10Z",
        "PR Comment": "I made \"mini\" architecture. \n\nStill wondering about the guessing of the input shape. \nMaybe padding trimming the time axis and raising a warning would be better? WDYT?  ",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-22T19:40:11Z",
        "PR Comment": "In the line of: \n```patch\nIndex: asteroid/masknn/convolutional.py\n<+>UTF-8\n===================================================================\n--- asteroid/masknn/convolutional.py\t(revision dd47fce87c6d72878c6fffc38f14b1ef74ff1c27)\n+++ asteroid/masknn/convolutional.py\t(date 1606073650145)\n@@ -516,15 +516,29 @@\n             **kwargs,\n         )\n \n-    def _check_input_dims(self, x):\n-        # TODO: We can probably lift the shape requirements once Keras-style \"same\"\n-        # padding for convolutions has landed: https://github.com/pytorch/pytorch/pull/42190\n+\n+    def fix_input_dims(self, x):\n         freq_prod, time_prod = self.encoders_stride_product\n-        if (x.shape[1] - 1) % freq_prod or (x.shape[2] - 1) % time_prod:\n+        if (x.shape[1] - 1) % freq_prod:\n             raise TypeError(\n                 f\"Input shape must be [batch, freq + 1, time + 1] with freq divisible by \"\n-                f\"{freq_prod} and time divisible by {time_prod}, got {x.shape} instead\"\n+                f\"{freq_prod}, got {x.shape} instead\"\n             )\n+        if (x.shape[2] - 1) % time_prod:\n+            div, mod = divmod((x.shape[2] - 1), time_prod)\n+            pad_shape = [0, time_prod - mod]\n+            x = nn.functional.pad(x, pad_shape, mode=\"constant\")\n+        return x\n+\n+    # def _check_input_dims(self, x):\n+    #     # TODO: We can probably lift the shape requirements once Keras-style \"same\"\n+    #     # padding for convolutions has landed: https://github.com/pytorch/pytorch/pull/42190\n+    #     freq_prod, time_prod = self.encoders_stride_product\n+    #     if (x.shape[1] - 1) % freq_prod or (x.shape[2] - 1) % time_prod:\n+    #         raise TypeError(\n+    #             f\"Input shape must be [batch, freq + 1, time + 1] with freq divisible by \"\n+    #             f\"{freq_prod} and time divisible by {time_prod}, got {x.shape} instead\"\n+    #         )\n \n \n class SuDORMRF(nn.Module):\nIndex: asteroid/masknn/base.py\n<+>UTF-8\n===================================================================\n--- asteroid/masknn/base.py\t(revision dd47fce87c6d72878c6fffc38f14b1ef74ff1c27)\n+++ asteroid/masknn/base.py\t(date 1606072909225)\n@@ -92,8 +92,9 @@\n         )\n \n     def forward(self, x):\n-        self._check_input_dims(x)\n+        x = self.fix_input_dims(x)\n         return super().forward(x.unsqueeze(1))\n \n-    def _check_input_dims(self, x):\n+    def fix_input_dims(self, x):\n         \"\"\"Overwrite this in subclasses to implement dimension checks.\"\"\"\n+        return x\n```\n\nwhich doesn't work because the padding doesn't match the `tf_rep` when applying the mask but we could also correct for that without problems. ",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-23T16:06:23Z",
        "PR Comment": "> So we could easily add a `n_src` arg to it and enable separation. Am I missing something?\n\nI think so, yes! Probably also applies to DCUNet.\n\n> Maybe padding trimming the time axis and raising a warning would be better?\n\nI like the padding/trimming approach but I dislike warnings when you can raise an error instead. I suggest to make things explicit: By default it raises an error that tells you to enable padding/trimming or fix your input size. PoC, maybe the choice between padding and trimming is over engineered?\n\n```py\n# time_prod\nstrideprod = 16\n# x.shape[1]\nl = 35\n# New self.fix_length parameter to __init__\nfix_length = None  # or \"pad\" or \"trim\"\n\nl_remainder = (l - 1) % strideprod\nif l_remainder:\n    if fix_length == \"trim\":\n        l -= l_remainder\n        print(f\"Trimmed length to {l}\")\n    elif fix_length == \"pad\":\n        l += strideprod - l_remainder\n        print(f\"Padded length to {l}\")\n    else:\n        print('Invalid shape, use fix_length=\"trim\" or fix_length=\"pad\"')\n\n# tf = pad_or_trim_to(tf, l)\n# tf = net(tf)\n# tf = reconstruct_shape(tf, x.shape[1])\n```",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-23T18:08:53Z",
        "PR Comment": "I understand. \nIn the current code, I don't raise a warning, I just pad. Feel free to adapt if how you'd like. ",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-23T18:18:57Z",
        "PR Comment": "> In the current code, I don't raise a warning, I just pad. Feel free to adapt if how you'd like.\n\nOK, working on it now!",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-23T19:27:06Z",
        "PR Comment": "Made some changes, what do you think? It didn't have time to look at the tests yet, but the tests work for both fix modes, and fail for None.\n\nBtw there is a test failure related to Torch complex number support (already fixed in Torch nightly)",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-23T21:55:38Z",
        "PR Comment": "Do you have a link to the issue or the PR? \nMaybe we should run tests on torch-nightly as well? \nI'll have a look at the changes. ",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-24T07:57:24Z",
        "PR Comment": "> Do you have a link to the issue or the PR?\n\nI think it is https://github.com/pytorch/pytorch/issues/47157\n\n> Maybe we should run tests on torch-nightly as well?\n\nThat would be a good idea.",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-24T07:58:05Z",
        "PR Comment": "> * Comment the test that's failing, or skip if torch is under 1.8, sounds ok?\n\nBetter skip if Torch < 1.8",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-24T08:57:55Z",
        "PR Comment": "I let you take care of those changes (skip the test and masknet_kwargs). We'll add tests on nigthly afterwards. ",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-24T09:40:42Z",
        "PR Comment": "Ok, done! I also changed the args specifications to be all tuples because I accidentally modified some of the lists because they are mutable, which is a terrible thing to debug.",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-24T09:57:14Z",
        "PR Comment": "I created a PR against PyTorch for better version checks https://github.com/pytorch/pytorch/pull/48414",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-24T11:10:09Z",
        "PR Comment": "I'll review the whole PR again today but I think it's ready to be merged !",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-24T11:21:56Z",
        "PR Comment": "> I'll review the whole PR again today\n\nThank you! Much appreciated. Somehow this PR got MUCH bigger than expected :-D",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-24T11:47:04Z",
        "PR Comment": "Found missing shape check for DCCRN, added tests for shape checks, and also fixed the PyTorch 1.8 issue (it only breaks if you do `foo[:x]` where `x = len(foo)`, ie. a noop slice)",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-24T11:49:53Z",
        "PR Comment": "So the trimming padding can be done with a single function, `trim_x_to_y`  and `pad_or_trim_x_to_y` are not needed it seems. ",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-24T11:52:07Z",
        "PR Comment": "It's quite dangerous to push to the same branch in the same time (my bad :sweat_smile: ) but we did well ^^",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-24T11:53:06Z",
        "PR Comment": "> So the trimming padding can be done with a single function\n\nIndeed it seems so! https://github.com/pytorch/pytorch/blob/367426494759ddde0896665ed55c6f9af2870cf0/aten/src/ATen/native/ConstantPadNd.cpp#L25",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-24T11:55:16Z",
        "PR Comment": "So we could remove the trim functions and change the pad docstring to say \"right-pad or right-trim\".\n\nBtw I won't be pushing any code for the next few hours, so feel free to push :P",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-24T12:00:06Z",
        "PR Comment": "I'll do that. ",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-24T12:45:45Z",
        "PR Comment": "I re-reviewed everything and it LGTM\nWaiting for your approval to merge it. ",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-24T13:51:18Z",
        "PR Comment": "Also did a quick review, LGTM, go ahead :)",
        "PR/Issue Number": "276"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-19T13:43:15Z",
        "PR Comment": "I think this is a solid solution. But maybe the expected cost this scenario:\n\n> users might change it without changing other part of the model that reference it\n\n(with cost = probability of someone hitting that use \u00d7 time it takes them to fix the issue) isn't worth doing such a \"complicated\" solution and we can simply go with a normal attribute instead?",
        "PR/Issue Number": "336"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-11-19T15:19:23Z",
        "PR Comment": "I think it's nice to be able to raise the warning, which justifies this approach.\nGoing to fix the rest, add tests, and merge since you seem ok. \nThanks for the review",
        "PR/Issue Number": "336"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-23T19:22:02Z",
        "PR Comment": "do you have an alternative to this? this is an important fix for torch.script as it does not allow forward passes that would have `Optional[torch.Tensor]`",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-23T19:54:44Z",
        "PR Comment": "I don't exactly understand the question. \nThis looks like it will always return a torch.Tensor with the `else` right? ",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-24T06:04:54Z",
        "PR Comment": "yes, and this is required for torch.script as a path without a returned tensor is not allowed",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-24T06:05:16Z",
        "PR Comment": "the questions is if setting this path to the default is okay for yiou",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-24T07:22:22Z",
        "PR Comment": "Yes, that seems alright. \nI don't think people will give 1-dim tensor as spectrograms.. ",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-24T17:24:20Z",
        "PR Comment": "Actually not needed here? ",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-02T18:34:01Z",
        "PR Comment": "We should probably have a comment here to explain that this is for scriptability. \nI wonder, @faroit, is there a prettier way to do that? \nFor example, this is not going to change when a model is exported (the control flow op is static), so this could be traced instead of scripted? And we could keep the same behaviour as currently?  ",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-02T18:34:04Z",
        "PR Comment": "What this related to the jitability? ",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-02T18:49:16Z",
        "PR Comment": "Oops, really sorry for that. As you have certainly guessed, it has nothing to do with jitability :s. Is there any way to rewrite the commit history without making it worse?",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-02T18:53:39Z",
        "PR Comment": "It's better to leave unrelated code unchanged. This is fine for this one, you can leave it. ",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-02T19:23:50Z",
        "PR Comment": "If you want to go branchless in the different `forward` methods, we could add a pointer to a function that switches to  the actual forward method when the class is initialized. Not necessarily the most elegant solution, but it should remove the need for `if` statements. For example, for `Conv1DBlock`, it would look like:\n\n```python\n    # In Conv1DBlock\n    def forward(self, x):\n        \"\"\" Input shape [batch, feats, seq]\"\"\"\n        shared_out = self.shared_block(x)\n        res_out = self.res_conv(shared_out)\n        if not self.skip_out_chan:\n            return res_out, res_out\n        skip_out = self.skip_conv(shared_out)\n        return res_out, skip_out\n```\n\n```python\n    def __init__(self, ...):\n        #...\n        if self.skip_conv:\n            self._skip_return = self._skip_out_return\n        else:\n            self._skip_return = self._no_skip_return\n\n    def forward(self, x):\n        \"\"\" Input shape [batch, feats, seq]\"\"\"\n        shared_out = self.shared_block(x)\n        res_out = self.res_conv(shared_out)\n        skip_out = self._skip_return(shared_out)\n        return res_out, skip_out\n\n    def _skip_out_return(self, shared_out):\n        return self.skip_conv(shared_out)\n\n    def _no_skip_return(self, shared_out):\n        return torch.tensor([0.0])\n```\n\nWhat do you think?",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-02T19:32:40Z",
        "PR Comment": "But you needed to keep the `torch.tensor([0.])` in the `_no_skip_forward` because script would raise an error otherwise right?  I thought about that and I don't think it solves the problem. Scripting will raise the same typing issues and tracing will still work in the same way. \n\nAlso, if we return two tensors, there is a simpler solution without if in the forward, which is much more readable IMO\n```python\n# init\nself.skip_conv = nn.Conv1d() if skip_chan else nn.Identity()\n...\n# forward\nreturn res_out, self.skip_conv(res_out)\n```\nbut this still doesn't solve the problem. \n\nWe can really on the dev to decide whether the control flow is static or not, if it's static, trace is fine, otherwise script is needed, and in this case, typing issues need to be fixed. ",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-04T12:49:43Z",
        "PR Comment": "@mhu-coder pointed out that this is wrong, the sqrt should only be applied to the variance. He'll fix it. ",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-04T13:17:13Z",
        "PR Comment": "thanks for reporting it here. I have added a test and fixed the issue (in 1 commit each) but have not pushed yet.",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-22T09:23:39Z",
        "PR Comment": "@popcornell do you have an argument to keep the `DualPathProcessing` definition in the `forward`?",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-22T09:25:50Z",
        "PR Comment": "The mask should be computed with `in_chan`, not with `mha_in_dim`. So actually, we don't need an output linear layer, but all these layers will `use `in_chan`, from `net_out_conv`.",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-22T09:27:50Z",
        "PR Comment": "Still very unsure about that.. ",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-22T09:30:24Z",
        "PR Comment": "Isn't there a built-in function to do that? ",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-22T09:35:14Z",
        "PR Comment": "Why from 1000 to 32? ",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-22T09:36:48Z",
        "PR Comment": "Let's test the filterbanks independently of the models, otherwise it'll grow too much. \nBy using `BaseModel` with a `nn.Identity` masker, and test consistency with different input shapes once traced. ",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-22T09:37:17Z",
        "PR Comment": "Why not `torch.testing.assert_allclose`?",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-22T09:52:09Z",
        "PR Comment": "Just to avoid using the same length at the input but does the value really matter?",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-22T10:00:54Z",
        "PR Comment": "32 samples makes 2 frames, it seems small. But I agree to have samples with different sizes. ",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-22T11:46:00Z",
        "PR Comment": "Do you mean having a class inheriting from `BaseModel` with a `masker` component set to `torch.nn.Identity` just to check that the traced model can process input data with various values of `ndim`?\n\nIn this case, why not a class inheriting from `BaseEncoderMaskerDecoder` instead? It makes writing the class much easier.\n\nI have written the test but, as suspected, tracing will only take one of the branches in the `forward`s of the encoder and the decoder meaning that if a model has been traced with, say, a 2D input, the traced model will only work with 2D tensors. From here, we can either script the `forward`s of the encoder and decoder or rewrite these methods to not have branches. I'll have a look at the scripting solution.\n\n**Edit**: Or we could have a hybrid export where some blocks are traced and others are scripted. In this sense, we could systematically script the encoder and the decoder of a `BaseEncoderMaskerDecoder` instance when exporting. This way, exported models will always support inputs of various shapes. However, this would also mean that each model would need to define an `export` or `trace` method in which we specify which parts are to be scripted. You can get a better illustration if you look at the changes I made to `asteroid/models/base_models.py` and `tests/models/jit_test.py`. I gotta say, I am not really satisfied with this solution...",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-22T13:57:08Z",
        "PR Comment": "I meant  `BaseEncoderMaskerDecoder`, yes. \nAnd yes, scripting will be the solution. ",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-22T22:53:22Z",
        "PR Comment": "Sorry saw this now. No my bad this was an error actually ",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-23T07:32:35Z",
        "PR Comment": "Thanks !",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-27T18:59:55Z",
        "PR Comment": "Sorry for being late with the review. This is the only change that looks a bit weird to me. Was this necessary for Jit compat? If so, I think we should at least add a comment, or even better move this logic into a function with a descriptive name.",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-27T19:08:49Z",
        "PR Comment": "I don't think this was necessary, @mhu-coder can you tell? \nWhy does it look weird? ",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-27T19:15:57Z",
        "PR Comment": "It was necessary for tracing but as a traced model would have always taken the branch taken during tracing. In other words, it wouldn't have been possible to use the model with inputs of dimensions different to the example used during tracing and have an output with the right/expected dimension.\nHowever, if we move this output shaping block in its own function, I am sure we could keep the old more readable logic and add the `torch.jit.scripting_if_tracing` decorator added to it. So the changes would be something like:\n\n```python\ndef forward(self, wav):\n   # ...\n   return shape_output(reconstructed, wav.ndim)\n\n@torch.jit.scripting_if_tracing\ndef shape_output(reconstructed, wav_dim):  # really not sure about the name of the function\n    if wav_dim == 1:\n        return reconstructed.squeeze(0)\n    return reconstructed\n```",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-27T19:31:48Z",
        "PR Comment": "Sounds better. Mind submitting a PR? ",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-27T19:48:12Z",
        "PR Comment": "sure, on it",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-27T21:34:05Z",
        "PR Comment": "Cool! It\u2019s just a very uncommon way to write an if else clause :-) and also implicitly assumes 0/1 == True/False for Torch tensors ",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-23T19:58:08Z",
        "PR Comment": "This is a first step, thanks a lot ! \nI guess, we'll also need to modify the tests, should I do it? Or do you plan to do it? ",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-23T20:00:24Z",
        "PR Comment": "There is this test failure which I don't fully understand, was not here before and doesn't really seem related\n\n```\ntests/engine/scheduler_test.py:16: in common_setup\n    trainer = Trainer(max_epochs=1, fast_dev_run=True)\n/opt/hostedtoolcache/Python/3.6.11/x64/lib/python3.6/site-packages/pytorch_lightning/trainer/trainer.py:310: in __init__\n    torch.backends.cudnn.deterministic = self.deterministic\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <torch.backends.ContextProp object at 0x7f3cbd0ad7f0>\nobj = <module 'torch.backends.cudnn' from '/opt/hostedtoolcache/Python/3.6.11/x64/lib/python3.6/site-packages/torch/backends/cudnn/__init__.py'>\nval = False\n\n    def __set__(self, obj, val):\n        if not flags_frozen():\n            self.setter(val)\n        else:\n            raise RuntimeError(\"not allowed to set %s flags \"\n>                              \"after disable_global_flags; please use flags() context manager instead\" % obj.__name__)\nE           RuntimeError: not allowed to set torch.backends.cudnn flags after disable_global_flags; please use flags() context manager instead\n\n/opt/hostedtoolcache/Python/3.6.11/x64/lib/python3.6/site-packages/torch/backends/__init__.py:39: RuntimeError\n```\nDo you know what this is about? ",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-24T10:26:23Z",
        "PR Comment": "> Do you know what this is about?\n\n@mpariente no, not really. But maybe we can take out a few commits to get this merged.\n\nI think at least 3cbfb991b60bbc7353947e5e1401d0038ac2a483 should be picked",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-24T17:57:43Z",
        "PR Comment": "Only 5 errors left but I don't know why, you didn't touch schedulers or system's code, that seems weird. ",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-02T13:56:39Z",
        "PR Comment": "@mhu-coder will have a look at that as well, so let's look out for merge conflicts. \nWe'll be three on the same branch. Please rebase (`git pull --rebase`) when possible and merge only when there are merge rebase conflicts. \n\nAlso, there will be some tricky decisions to make to fix jitability, take a stab at it and add a comment on the PR at the places you're not sure about, we'll iterate from there.\n\nThanks in advance !",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-02T18:56:09Z",
        "PR Comment": "I wonder if we shouldn't trace models instead of scripting them, the static typing can be more annoying than the tracing. And we would script the methods we know won't be faithful. I don't know if we have a lot of _dynamic_ control flow in the models. Any opinion? ",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-02T19:07:46Z",
        "PR Comment": "> I wonder if we shouldn't trace models instead of scripting them, the static typing can be more annoying than the tracing. And we would script the methods we know won't be faithful. I don't know if we have a lot of dynamic control flow in the models. Any opinion?\n\nyes, tracing would surely be favorable but I thought scripting is easier and should be done first. Also tracing requires fixed batch sizes for recurrent models. Not sure if we want to go that route?",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-02T19:18:59Z",
        "PR Comment": "But, you can mix scripting in tracing. Where needed, we would add the `@torch.jit.script` decorator (which can then handle the batch sizes in RNNs I guess), for the rest the tracing would handle the static control flow so we don't need to fix all the scripting problems. \nThe intermediate representation is the same between scripting and tracing so the end models can be the same if we handle it well. \n\nI asked for opinions/feedback on twitter, just in case. ",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-02T20:19:22Z",
        "PR Comment": "> But, you can mix scripting in tracing. Where needed, we would add the @torch.jit.script decorator (which can then handle the batch sizes in RNNs I guess), for the rest the tracing would handle the static control flow so we don't need to fix all the scripting problems.\n\nyep, thats how I handled it in open-unmix now. The core (including the LSTM) is traceable, the wiener filter is scriptable.",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-03T07:59:17Z",
        "PR Comment": "Torchscript assumes that every variable with undefined types are Tensors, then crashes at runtime when it discovers that it wasn't the case or when the type of the variable changed. This also includes function keyword arguments as it does not use the default value to infer the type. The doc of [torch.jit](https://pytorch.org/docs/stable/jit_language_reference.html) advises to use a MyPy-style type annotations or type hints (like I did in `param_sinc_fb.py`) to force non `Tensor` types.\n\nSo it would be probably better to stick to one for consistency. @mpariente , do you have a preference between the two possible solutions?",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-03T08:47:48Z",
        "PR Comment": "> yep, thats how I handled it in open-unmix now. The core (including the LSTM) is traceable, the wiener filter is scriptable.\n\nAnd in the end, do you trace or script the model? \n\n> Torchscript assumes that every variable with undefined types are Tensors, then crashes at runtime when it discovers that it wasn't the case or when the type of the variable changed. This also includes function keyword arguments as it does not use the default value to infer the type. The doc of [torch.jit](https://pytorch.org/docs/stable/jit_language_reference.html) advises to use a MyPy-style type annotations or type hints (like I did in `param_sinc_fb.py`) to force non `Tensor` types.\n> \n\n> So it would be probably better to stick to one for consistency. @mpariente , do you have a preference between the two possible solutions?\n\nI saw part of that, and adding typing to Asteroid's Modules wouldn't hurt.\nBut I still think, that both scripting and tracing can be mixed without problem, it's actually meant to be used this way, right? \nI don't think it's about consistency, tracing is limited by essence but more flexible, and scripting is more general but also more rigid and torch gives us those two tools, I think we can use both of them. \n",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-03T08:50:19Z",
        "PR Comment": "> I saw part of that, and adding typing to Asteroid's Modules wouldn't hurt.\n\nI meant, would you prefer MyPy-style typing or Python type hints? Or you don't mind having a mix of both?",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-03T08:51:16Z",
        "PR Comment": "Oh ok sorry, didn't understand it this way. \nI'll have a look now then",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-03T08:53:36Z",
        "PR Comment": "Python type hints please :wink: ",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-04T13:21:04Z",
        "PR Comment": "Regarding tracing vs. scripting, since the idea is to use `torch.jit.trace` everywhere and to switch to script mode by decorating functions that need this mode with `torch.jit.script`, would it be alright to replace calls to `torch.jit.script` with calls to `torch.jit.trace` in `jit_test.py`?",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-19T14:54:50Z",
        "PR Comment": "Hey guys,\nA bit late for the hackathon and I don't know if this feature is still planned but I have had another look and solved some of the issues (there only warnings left when tracing the models in the tests). Below is a summary of the issues that are left:\n* `DPTNet` expects the number of features to be a multiple of the number of heads in the multi attention layer but the `__init__` method of the class gives no control to the `n_heads` argument of `DPTransformer`. This makes writing the tracing test for `DPTNet` with `STFT` rather cumbersome. A way around it would be the addition of the keyword argument `n_heads` to the `__init__` of `DPTNet`, which would add another argument to a method that already has many...\n* When tracing a model, the jit compiler raises a warning anytime it encounters a branch in the code as only one of these branches will be taken by the traced model. In particular, all the checks written in the models are effectively bypassed\n\nOn the upside, properties do not seem problematic.",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-19T18:14:35Z",
        "PR Comment": "Didn't read the code in detail but that sounds great ! \nWhich version of torch are you using btw? \n\n> On the upside, properties do not seem problematic.\n\nWhich properties in particular? \n\n\n\n\n> * `DPTNet` expects the number of features to be a multiple of the number of heads in the multi attention layer but the `__init__` method of the class gives no control to the `n_heads` argument of `DPTransformer`. This makes writing the tracing test for `DPTNet` with `STFT` rather cumbersome. A way around it would be the addition of the keyword argument `n_heads` to the `__init__` of `DPTNet`, which would add another argument to a method that already has many...\n\nI think it was an oversight, we should add `n_heads` in `DPTNet`. Many arguments to architectures is not a problem IMO. \nRegarding the problem between number of features and `n_head`, I wonder if there isn't a Linear layer between the input and the masker. I'll have a look. \n\n\n>  * When tracing a model, the jit compiler raises a warning anytime it encounters a branch in the code as only one of these branches will be taken by the traced model. In particular, all the checks written in the models are effectively bypassed\n\nCan you elaborate please? ",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-20T11:42:36Z",
        "PR Comment": "> Which version of torch are you using btw?\n\nI am using torch 1.6.0. Are you using something else?\n\n> Which properties in particular?\n\nI remember that jit.script had issues with class properties but I may be wrong here. When using `trace`, tracing a `DeMask` model, to which I added a shameless copy/paste `sample_rate` property, did not raise errors.\n\n> Can you elaborate please?\n\nExample of warning:\n```\ntests/models/jit_test.py::test_trace_bss_model[LSTMTasNet]\n  anaconda3/envs/asteroid/lib/python3.7/site-packages/torch/nn/modules/rnn.py:176: TracerWarning: Converting a\n  tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python\n  values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!\n    if self.input_size != input.size(-1):\n```\nI guess, the condition will always evaluate to the value that was found during tracing. Kind of ironic that the code that raises this warning is part of torch. But it also happens for some lines in asteroid too:\n\n```\ntests/models/jit_test.py::test_trace_bss_model[LSTMTasNet]\n  asteroid/asteroid/filterbanks/enc_dec.py:172: TracerWarning: Converting a tensor to a Python boolean might\n  cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as\n  a constant in the future. This means that the trace might not generalize to other inputs!\n    if channels == 1 and self.as_conv1d:\n```",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-21T07:57:43Z",
        "PR Comment": "- 1.6.0 is fine, I was just asking. \n- Ok for the property. I guess it'll still break if there are graph computations inside it. \n- Thanks for the examples. We have to browse the code very carefully to find where the tracing isn't enough, and we need to script that part. There are graphs that'll stay static at run time (is there skip connection etc..) and others won't (number of input channels etc..). \n\nRegarding the DPTNet, I re-checked, there is no Linear layer in the paper. We should add one if the input dim is not divisible by the number of heads, otherwise it's pretty useless. @mhu-coder, do you feel like doing it?",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-21T08:24:13Z",
        "PR Comment": "> Regarding the DPTNet, I re-checked, there is no Linear layer in the paper. We should add one if the input dim is not divisible by the number of heads, otherwise it's pretty useless. @mhu-coder, do you feel like doing it?\n\nSure, will have a look in the afternoon.\n\nFYI, I had a look at scripting the models instead of tracing them:\n* `ConvTasNet` was fine\n* `DPRNNTasNet` and `LSTMTasNet`: I ran into an issue in `torch/nn/modules/rnn.py` that read `GeneratorExp aren't supported`, which can be removed by converting a set comprehension into a regular loop but then ended up with a `AttributeError` caused by `torch/jit/frontend`.\n* `DPTNet`: some issues with parts of torch and asteroid but ultimately, `torch.script` does not support methods/functions that take callables as argument (cf https://discuss.pytorch.org/t/function-type-in-torchscript/65416). This is the case of some functions in `asteroid/dsp/overlap_add.py`.",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-21T15:48:00Z",
        "PR Comment": "Ok, what's left to do to merge this @mhu-coder ? ",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-21T16:25:43Z",
        "PR Comment": "Just added the linear layers (one at the input, another at the output) to DPTransform when `in_chan` is not a multiple of `n_heads`.\n\n`DPTNet` is still missing an argument for `n_heads` in its `__init__` method.\n\nOther than that, there is still the question of which model can be traced and which should be scripted instead. But I wonder if it wouldn't be better to give this responsibility to the person that is going to trace/script a model.",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-22T19:05:50Z",
        "PR Comment": "Cool, thanks !\n\nI actually thought that it was possible to decorate functions in `nn.Module`, but it's not for now ([see language reference](https://pytorch.org/docs/stable/jit_language_reference.html#language-reference)). My idea (before that) was to add a `script` decorator to all methods needing scripting, and that would have been satisfying. But that's not possible. So the `trace` method you propose is good for now.  ",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-22T19:12:13Z",
        "PR Comment": "Actually, if we make an external method out of `forward`, we can script automatically, which would be prettier. And for the Encoder/Decoder, it's possible. \n\nAlso, we'll use `torch.jit.script_if_tracing` instead of `script` so we avoid the start up time. ",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-22T20:08:35Z",
        "PR Comment": "Finally scripted the `forward` by making it external. I guess we don't need the `trace` function anymore, can we remove it? ",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-22T20:13:25Z",
        "PR Comment": "So, I merged master. \nTracing tests take quite a while. I'm wondering if it shouldn't be a different CI build altogether, so that we can really test thing rigorously. Thoughts? \n\nNote to myself (assistance accepted): before merging, need to go through the whole `masknn` codebase to be sure that tracing is enough on all the modules that we don't script. ",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-23T08:23:48Z",
        "PR Comment": "> Finally scripted the `forward` by making it external. I guess we don't need the `trace` function anymore, can we remove it?\n\nNeat! Sure, let's remove `trace`, no need to keep around lines that are unused\n\n> before merging, need to go through the whole masknn codebase to be sure that tracing is enough on all the modules that we don't script.\n\nIt's not as good as carefully reading the code of each mask but we can add tests to check that every model can handle input variable shapes (actually, I am facing some runtime errors but will try to fix as many as I can). This will increase the time `jit_test.py` takes to run though.",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-23T13:46:07Z",
        "PR Comment": "Just added a couple of tests to check that traced models produce the same output for n-D input tensors (with n in [1, ..., 4]). Is it normal that most of the original/non-traced models crash?",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-23T13:56:12Z",
        "PR Comment": "> Just added a couple of tests to check that traced models produce the same output for n-D input tensors (with n in [1, ..., 4]). Is it normal that most of the original/non-traced models crash?\n\nYes. I don't see why not. \nConv1d expects a 3D input, and doesn't support 4d inputs, LSTM either etc.. \n\nThanks but those tests can be removed. ",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-23T18:08:50Z",
        "PR Comment": "I think I see what you mean.\n\nBTW, I saw that `DeMask` could not handle 1-D input when traced with a 2-D input but I guess this comes from the way the forward is written and the whole class could be refactored anyway.\n\nWhen a `(batch, time)` data (with batch > 1) is given to LSTMTasNet, there's a RuntimeError that is raised in the forward of the decoder:\n```\nE       RuntimeError: The following operation failed in the TorchScript interpreter.\nE       Traceback of TorchScript (most recent call last):\nE         File \"asteroid/filterbanks/enc_dec.py\", line 296, in multishape_conv_transpose1d\nE               view_as = (-1,) + spec.shape[-2:]\nE               out = F.conv_transpose1d(\nE                   spec.view(view_as),\nE                   ~~~~~~~~~ <--- HERE\nE                   filters,\nE                   stride=stride,\nE       RuntimeError: view size is not compatible with input tensor's size and stride (at least one dimension spans across two contiguous subspaces). Use .reshape(...) instead.\n```\n\nI guess this could be the object of another pull request?",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-23T18:57:39Z",
        "PR Comment": "> BTW, I saw that DeMask could not handle 1-D input when traced with a 2-D input but I guess this comes from the way the forward is written and the whole class could be refactored anyway.\n\nI agree. \n\n> I guess this could be the object of another pull request?\n\nThis PR is already so big that we can use `reshape` instead, no problem. ",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-23T19:48:17Z",
        "PR Comment": "yeah, you're right. It's time to finish this PR.\nI have just reverted the `res, res` return in `asteroid/masknn/convolutional.py` to what it was before as the method output consistency in type is only needed for `torch.jit.script`. So, in other word, if we always trace/never script a model relying on `Conv1DBlock` or `TDConvNet`, the inconsistency is fine.\n\nIs the thorough check of the modules in `asteroid/masknn` the only thing left for this PR?",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-24T07:03:08Z",
        "PR Comment": "I guess, yes. \nMaybe we'll \"fix\" DeMask in another PR. ",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-24T18:26:36Z",
        "PR Comment": "Not 100% sure \n\n- [x] masknn/norms (externalized funcs + unit test)\n- [x] masknn/activations (nothing to worry about).\n- [x] masknn/attention\n- [x] `TDConvNet`, `TDConvNetpp`, `Conv1dBlock`, `UConvBlock`, `UBlock`, `SuDORMRFImproved`, `SuDORMRF`. All but `# CHECK-JIT`\n- [x] masknn/recurrent (missing   # CHECK-JIT)   \n- [x] models: `BaseModel`, `ConvTasNet`, `DPRNNTasNet`, `LSTMTasNet`, `DPTNet` (`SuDORMRF*Net`)\n- [x] filterbanks: all filterbanks + encoder + decoder.\n- [x] filterbanks/transforms\n- [x] dsp: mixture_consistency: ok. Lambda overlap non scriptable (traceable maybe?) To be checked. DualPathprocessing used in DPTNet and works (no specific unit test)\n\nThis PR won't assure tracability/jitability for the complex module, the DCCRN and DCUNet. We'll do that on a follow-up PR (Cc. @jonashaag). Most of it is tagged with # CHECK-JIT on the class. \n\n",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-24T19:54:02Z",
        "PR Comment": "Going back to norms, this doesn't work\n```python\nfrom asteroid.masknn import norms\n\nmodel = norms.GlobLN(10)\nx = torch.randn(1, 10, 12)\ntraced = torch.jit.trace(model, x)\ny = torch.randn(2, 10, 18, 12)\nassert_allclose(traced(y), model(y))\n```\n\nIf we script GlobLN instead, it's going to work. ",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-24T19:56:22Z",
        "PR Comment": "`script_if_tracing` is not working on 1.6.0 because it returns a function, instead of calling the function. \nSo we'll make a patch for it. (Works on nightly, fixed [here](https://github.com/pytorch/pytorch/pull/42486) for reference)",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-26T11:05:28Z",
        "PR Comment": "Reading for merging IMO. ",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-26T13:44:35Z",
        "PR Comment": "Added SuDORMRF networks as well finally. \n@mhu-coder @jonashaag @popcornell @faroit any feedback appreciated.",
        "PR/Issue Number": "237"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-21T20:09:17Z",
        "PR Comment": "This is great. LGTM!",
        "PR/Issue Number": "285"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-22T08:22:37Z",
        "PR Comment": "\\rebase",
        "PR/Issue Number": "285"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-22T08:24:02Z",
        "PR Comment": "\\rebase",
        "PR/Issue Number": "285"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-22T09:03:05Z",
        "PR Comment": "Missing test for the CLI. Merging anyway. ",
        "PR/Issue Number": "285"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-21T16:45:06Z",
        "PR Comment": "I think we should not do any of this. It's easy for the user to resample for model input and resample the model output. So better be explicit and require the user to type a bit more. As a compromise we could have automatic resampling behind a flag: if the flag is true, resample without warning; if the flag is false, raise an error.",
        "PR/Issue Number": "283"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-21T17:13:45Z",
        "PR Comment": "It makes sense to do it because of the CLI IMO..",
        "PR/Issue Number": "283"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-22T07:12:23Z",
        "PR Comment": "This is exactly how I\u2019d do it. If you u prefer you could even make resample default to true in the CLI, but not sure if that\u2019s good. ",
        "PR/Issue Number": "283"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-22T07:33:48Z",
        "PR Comment": "Actually, I thought about this yesterday. And this won't work for serializing and loading. \n`BaseTasNet` expects encoder and decoder to have the filterbank `attribute`, so that we can call `get_config`.\nHere, the only thing you need in the name of the architecutre, so we should probably rewrite the serialize and from_pretrained methods. \nThat's when we might want to split the current `BaseTasNet` into two. ",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-23T07:26:51Z",
        "PR Comment": "After merging #232, it will be easier to do it without any tricks. ",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-24T17:31:03Z",
        "PR Comment": "Oops, what happened here?",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-24T17:33:30Z",
        "PR Comment": "Fixed:\n\n- Edge case `desired_len > signal_len`\n- Always return stop as int (as documented)",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-24T17:33:45Z",
        "PR Comment": "Deduplicated some tests",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-24T17:34:50Z",
        "PR Comment": "Fixed name",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-24T18:32:17Z",
        "PR Comment": "They are not alternated, they are concatenated `[r1, r2,..., i1, i2, ...]`.",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-24T19:29:00Z",
        "PR Comment": "I understand the goal, but can you explain the detail of the attribute overwriting please? ",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-24T19:50:35Z",
        "PR Comment": "I see what this does (and it's cool) but this is not clear from either the name or the docstring",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-24T19:54:04Z",
        "PR Comment": "That's one way of doing it. Which gives \n```python\ncomplex_module = OnComponents(m, *args, **kwargs)\n```\nWhat about this way \n```python\ncomplex_module = OnComponents(m(*args, **kwargs))\n```\nso that we wrap instances instead of objects? \nDid you think about both design and chose this one? If yes, why? ",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-24T19:55:59Z",
        "PR Comment": "Would like to see the equations for that. \nThe sigmoid bound will allow for `sqrt(2)` magnitude mask right? ",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-24T19:57:48Z",
        "PR Comment": "What is this? ",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-24T19:59:15Z",
        "PR Comment": "Why not a relative import here? ",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-24T20:05:04Z",
        "PR Comment": "Thanks ! \nThat should really live in a separate PR though. \nIt's fine this time but next time, I'd rather have several small ones please. ",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-24T20:06:27Z",
        "PR Comment": "This is seems really specific to the DCUNet architecture. ",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-24T20:06:56Z",
        "PR Comment": "> `enc_out_chan + skip_in_chan`\n\nDoes this mean the skip connection is concatenative? ",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-24T20:07:44Z",
        "PR Comment": "Maybe this is useful in general, IDK. ",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-24T20:09:38Z",
        "PR Comment": "Add `unet` in the function name somewhere please. ",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-24T20:19:11Z",
        "PR Comment": "Also, if `skip_connections` is not kwarg, why do we need the `*`? I don't know about this ^^",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-24T20:20:30Z",
        "PR Comment": "In the long run, the purpose of the file is to hold all the base classes of `masknn`? ",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-26T18:56:11Z",
        "PR Comment": "Will this be the preferred method for instantiating them? \nIf yes, we should add the accepted keys in `architectures.`",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-26T19:04:50Z",
        "PR Comment": "Maybe document here that there is the `default_architecture` classmethod? With valid architecture names? \nOr add the `show_available_architectures` class method in the base class? \nOtherwise, I don't see how the user discovers which architecture to use. ",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-26T19:07:07Z",
        "PR Comment": "That's pretty, I never use it. ",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-26T19:10:55Z",
        "PR Comment": "I love this ! \n@popcornell do you feel like to give your opinion on this as well? ",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-26T19:12:29Z",
        "PR Comment": "@popcornell Opinion about renaming that to `BaseEMDNet`? \n(with code to make it backward compatible, obviously)",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-26T19:14:21Z",
        "PR Comment": "Can we have this whole file in a separate PR please? \nThis is quite important and I'd like to be able to dissociate from the rest. \nThanks",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-26T19:15:52Z",
        "PR Comment": "Can we put the default architecture to `\"DCCRN-CL\"`?",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-06T12:02:07Z",
        "PR Comment": "It is different: Your code uses only a single instance of `m` and thus only 1x the weights",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-06T12:02:30Z",
        "PR Comment": "I know... do you have an idea how to call it?",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-06T12:03:14Z",
        "PR Comment": "Added formulas, is this what you wanted? sqrt(2) is a possible magnitude value for BDSS.",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-06T12:04:41Z",
        "PR Comment": "Oversight. Will remove.",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-06T12:05:11Z",
        "PR Comment": "I dunno, I just needed a place to stick these :-D",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-06T12:05:56Z",
        "PR Comment": "This is now documented here.",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-06T12:07:47Z",
        "PR Comment": "Moved common code from DCU and DCCRN here",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-06T12:14:36Z",
        "PR Comment": "Maybe it's specific, I don't know... I have seen it many times, e.g. \"Singing Voice Separation with Deep U-Net Convolutional Networks\", Spleeter, DCUNet, DCCRNet, ... Granted, those are all variations of the same u-net structure. But I think even in the original u-net paper they use this structure.\n\n`skip_connections`: The `*` forces the following arguments to be keyword-only arguments. It's just a way to force people to call it like `unet_decoder_args(..., skip_connections=True)` rather than `unet_decoder_args(..., True)`, which is less readable code. So just a way to force people to write better code. I always do it for arguments that don't have an obvious meaning at the caller site. But I don't have strong opinions about it, so if you don't like it I can remove it.",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-06T12:15:14Z",
        "PR Comment": "Yes!",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-06T19:41:48Z",
        "PR Comment": "- Ok to keep this code in utils then, thanks.\n- Ok for that. I would maybe add `True` as a default value, WDYT? ",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-06T19:44:45Z",
        "PR Comment": "It can perform (documented) copy of the instance right? \nBut maybe you're right that the from the first way, it's clearer that two modules are instantiated. ",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-06T19:45:57Z",
        "PR Comment": "Typo `represenatation`.",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-06T19:48:30Z",
        "PR Comment": "Sorry for coming up with this in the second round, but what would you think about `on_reim` instead and `OnReIm`? It's probably clearer that it's for complex tensors. WDYT? ",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-06T19:57:14Z",
        "PR Comment": "If `module` a linear layer, we'll just have a complex linear (complex weights on complex inputs). \nIt's tempting to call it something like `ComplexLambdaModule` but this is not accurate because the `module_cls` is instantiated, not called as is. Maybe `ComplexModuleWrapper`? \nQ: are there other potential class that would deserve this name more? IDK",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-06T19:57:32Z",
        "PR Comment": "That's great thanks ! ",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-06T20:00:23Z",
        "PR Comment": "All black related commit should come in a single PR. \nI'm sorry to be rigid on that but this will make a cleaner history. \nImagine if we introduced a bug with this PR and we have the revert everything and check what made the bug, and redo all the formatting. Having separate PRs is better. ",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-01T10:15:23Z",
        "PR Comment": "I like it!",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-02T08:38:20Z",
        "PR Comment": "Still need to solve this. ",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-02T08:40:01Z",
        "PR Comment": "```suggestion\n```",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-02T08:45:47Z",
        "PR Comment": "Why the RNN as `ComplexSingleRNN` and the linear layer not? Just wondering.",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-02T08:47:13Z",
        "PR Comment": "Let's fix the conflicts with master on this. ",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-02T08:49:36Z",
        "PR Comment": "What about `masknet_kwargs`?",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-02T09:30:05Z",
        "PR Comment": "Good point, changed it.",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-21T11:57:38Z",
        "PR Comment": "Thanks a lot for the PR, I'll have a look soon !",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-21T13:12:46Z",
        "PR Comment": "That looks good in general, thanks !\n\n> Usage of PyTorch 1.7+ native complex128 dtype rather than Asteroid style complex type or torchaudio style complex type.\n> \n\nWe have to converge on that, it's not clear yet what we'll do. \nI like the current unification between real and complex filterbanks, and treating the STFT as a real filterbank does have advantages. \nWe could add a `as_complex` argument to both `Encoder` and `Decoder` that would change what they would return and what they would expect.\nWe would also have to see how complex tensors are treated in layers. \nBut overall, we'll need it for beamforming and other things so we'll use it. Not sure yet how. \n\n> Code structure, class names, code placing. Many things I wasn't sure where to place in the Asteroid codebase.\n\nThis looks great for now. \nThe `complex_nn.py` might move if it grows too much but it'll be easy to be BC.\nFor now, the configurations of DCUnet are part of the models, however I think they could belong the the masknn. \nCould DCUnet be useful for precomputed STFT features (if somebidy wants)?\nI think the answer is yes, so the configuration should be linked to the masker network rather than the full encoder/masker/decoder. Do you agree with me? \nIf yes, we could have a `_dc_unet_config.py` file in `masknn` and read the config from there so that we don't have this huge dict of list. \n\n> \n> Location of complex norms, activations, etc.\n\nFor now, I think this is fine. Again, if it comes to grow, be used in several other architectures, we'll refactor and keep the imports in `complex_nn.py`.\n\n> \n> Dealing with input shapes in `DCUMaskNet.forward`. Due to the encoder/decoder structure only specific T/F dimensions will work without padding or other workarounds.\n\nIt's a usual concern with Unet architectures I guess. \nEither we have a padding strategy and we do it automatically, or we document the accepted input shapes (and maybe provide utilities for the reshaping/passing?). I probably takes time to get the automatic padding right and unit-test it so I'd say document the accepted shapes for now.\n",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-21T16:47:14Z",
        "PR Comment": "Ok, great!\n\nYou are right, the architectures belong to the masknet.\n\nWill make the changes you suggested, and also add docstrings etc.\n\nBtw I just realized that the name \"BaseTasNet\" does not actually match what's going on here (TF domain masks). Also, for TasNet, is it really \"time domain\" if masking is done on a latent representation (that may very well be STFT-like)? \ud83d\ude05",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-21T18:27:01Z",
        "PR Comment": "It's true that I didn't have in mind it would be used as much when I named it `BaseTasNet`. As long as you go back to the time domain, it's similar to TasNet, even if the latent space is the STFT's space. \n\nAnyway, maybe we can rename it `BaseEMD` (for encoder masker Decoder)? Or do you have names in mind that could fit? ",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-24T17:03:47Z",
        "PR Comment": "Should be good to review now. Sorry for making so many changes in a single PR. If it is difficult to review, I will split.\n\nProbably misses lots of tests; I will wait for codecov to tell me the uncovered places and add some tests.",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-06T12:00:46Z",
        "PR Comment": "I split the changes into multiple commits, but did not split into multiple PRs, so as to not lose your review comments.\n\nIf you want me to split into multiple PRs I'm happy to do it.",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-06T12:35:44Z",
        "PR Comment": "I updated black to latest version because it now also formats docstrings.",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-06T19:33:35Z",
        "PR Comment": "I didn't comment on much on the `BaseTasNet` part on purpose. \nI'd like to cherry-pick that commit (88701900175535548383dc75ced135f12d81250b) to make a new PR, this is more visible for other people which might be interested, and for future reference. For the rest, it can stay like that, thanks a lot!",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-12T17:10:30Z",
        "PR Comment": "Hello, guys, does the the result of DCCRN over all the datasets match with the original paper\uff1f",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-12T17:10:41Z",
        "PR Comment": "@jonashaag ",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-12T17:36:26Z",
        "PR Comment": "Haven't done a full training yet, so I don't know! Also it's not possible to have identical results without using the exact same dataset and augmentation techniques described in the paper, of which we don't have the code.",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-25T10:03:51Z",
        "PR Comment": "Hey @jonashaag, can we split this PR into three now please? ",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-09-25T12:17:32Z",
        "PR Comment": "Yes will do it next week. ",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-01T10:27:16Z",
        "PR Comment": "Removed all changes not related to DCUNet. We can continue discuss DCUNet changes here.",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-02T09:34:09Z",
        "PR Comment": "I *think* I have addressed all review comments",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-02T14:49:29Z",
        "PR Comment": "This looks great, thanks a lot again ! \nThe CI fails though..",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-02T14:51:31Z",
        "PR Comment": "Ah well, multiple places with recursive imports... this \"let's flatten the namespaces by importing things in the parent module\" thing causes lots of problems. (For example importing models to `asteroid.models.` or even `asteroid.`) Specifically the problem is that importing submodules in `__init__.py` causes trouble with relative imports in those submodules.\n\nWill try to fix it",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-02T15:01:43Z",
        "PR Comment": "> Ah well, multiple places with recursive imports... this \"let's flatten the namespaces by importing things in the parent module\" thing causes lots of problems. (For example importing models to asteroid.models. or even asteroid.) \n\nI think models should be importable from `asteroid` directly. For `torch_utils` it was for backwards compat because there was a `torch_utils.py` file before that. \n\nThanks for fixing it. Now there is a new \"real\" failure. ",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-02T15:50:15Z",
        "PR Comment": "That was a nice one, thanks a lot Jonas !",
        "PR/Issue Number": "224"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-01T10:14:13Z",
        "PR Comment": "Thanks !\n\nI know it was my idea but I think the name BaseEMDNet is not that clear. \nDo we plan that people will discover it easily because it's the baseclass of all the models we use for now? Otherwise, the name doesn't speak for itself. ",
        "PR/Issue Number": "266"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-01T10:25:47Z",
        "PR Comment": "Unfortunately I don't have a better naming suggestion. Maybe `BaseEncoderMaskerDecoderNet` is a bit better. But yes, I would expect people to find and understand the class pretty quickly despite its name.",
        "PR/Issue Number": "266"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-10-01T10:40:00Z",
        "PR Comment": "Maybe `BaseEncoderMaskerDecoder`? We don't really need the `Net`.",
        "PR/Issue Number": "266"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-23T17:55:06Z",
        "PR Comment": "This is `self.__dict__`\n```\n{'training': True, '_parameters': OrderedDict(), '_buffers': OrderedDict(), '_non_persistent_buffers_set': set(), '_backward_hooks': OrderedDict(), '_forward_hooks': OrderedDict(), '_forward_pre_hooks': OrderedDict(), '_state_dict_hooks': OrderedDict(), '_load_state_dict_pre_hooks': OrderedDict(), '_modules': OrderedDict([('encoder', Encoder(\n  (filterbank): STFTFB()\n)), ('decoder', Decoder(\n  (filterbank): STFTFB()\n)), ('masker', Sequential(\n  (0): GlobLN()\n  (1): Conv1d(257, 1024, kernel_size=(1,), stride=(1,))\n  (2): GlobLN()\n  (3): ReLU()\n  (4): Dropout(p=0, inplace=False)\n  (5): Conv1d(1024, 257, kernel_size=(1,), stride=(1,))\n  (6): ReLU()\n))]), 'input_type': 'mag', 'output_type': 'mag', 'hidden_dims': [1024], 'dropout': 0, 'activation': 'relu', 'mask_act': 'relu', 'norm_type': 'gLN', 'fb_type': 'stft', 'n_filters': 512, 'stride': 256, 'kernel_size': 512, 'fb_kwargs': {}}\n\n```\nis this really what we want ? ",
        "PR/Issue Number": "235"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-23T18:04:20Z",
        "PR Comment": "forgot to filter  the underscore",
        "PR/Issue Number": "235"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-23T18:06:16Z",
        "PR Comment": "maybe this can do it `model_args = {k: v for k, v in self.__dict__.items() if not k.startswith('_') and k != \"training\"}`",
        "PR/Issue Number": "235"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-23T18:50:35Z",
        "PR Comment": "In this case, it's working but as soon as you add attributes to the class, it won't.. \n",
        "PR/Issue Number": "235"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-23T18:50:59Z",
        "PR Comment": "It takes two seconds and it's very clear \n```suggestion\n        model_args = {\n            \"input_type\": self.input_type,\n            \"output_type\": self.output_type,\n            \"hidden_dims\": self.hidden_dims,\n            \"dropout\": self.dropout,\n            \"activation\": self.activation,\n            \"mask_act\": self.mask_act,\n            \"norm_type\": self.norm_type,\n            \"fb_type\": self.fb_type,\n            \"n_filters\": self.n_filters,\n            \"stride\": self.stride,\n            \"kernel_size\": self.kernel_size,\n            \"fb_kwargs\": self.fb_kwargs,\n        }",
        "PR/Issue Number": "235"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-23T18:53:58Z",
        "PR Comment": "Actually, this also doesn't work. Because `fb_kwargs` doesn't get passed though correctly. \nAnd also not in the current code\n",
        "PR/Issue Number": "235"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-24T07:25:41Z",
        "PR Comment": "/rebase",
        "PR/Issue Number": "235"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-24T08:37:50Z",
        "PR Comment": "Nice PR ! \nThanks :rocket: ",
        "PR/Issue Number": "235"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-18T14:20:28Z",
        "PR Comment": "Merging, we can iterate on it if this doesn't look reasonable or needs more params.",
        "PR/Issue Number": "209"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-18T13:35:28Z",
        "PR Comment": "Maybe change these default values?",
        "PR/Issue Number": "208"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-18T13:52:03Z",
        "PR Comment": "What do you mean? \nThis is to test with a small architecture to speed up CI",
        "PR/Issue Number": "208"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-18T14:03:20Z",
        "PR Comment": "I'm merging this. If I didn't understand your initial comment about the defaults, we can always iterate from there. ",
        "PR/Issue Number": "208"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-18T14:20:28Z",
        "PR Comment": "Merging, we can iterate on it if this doesn't look reasonable or needs more params.",
        "PR/Issue Number": "209"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-07-22T12:43:52Z",
        "PR Comment": "I let it train with the config given above yesterday for a few hours and it seems training duration to reach X dB SI-SDR is similar to DPRNN[ks=16].",
        "PR/Issue Number": "174"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-07-22T12:50:20Z",
        "PR Comment": "Thanks for the PR Jonas ! \nGood to have some info about the speed of convergence as well \n\nIf I understand well, you changed `GlobLN` only right? \nI thought that you had a re-implementation. \nThis is great but I feel like I should ask @etzinis if he is ok that we integrate his code here? \n\nIf he is ok with that, I'll have few comments on docstrings mainly (because this is not the same style as ours) and we'll merge. ",
        "PR/Issue Number": "174"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-07-22T13:09:14Z",
        "PR Comment": "Sorry, no, not a re-implementation. As said I only de-duplicated some code (for example GlobLN seems to be copy-pasted 1:1 from Asteroid to SuDoRM-RF).",
        "PR/Issue Number": "174"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-07-22T14:46:10Z",
        "PR Comment": "Hey guys! I already have an implementation of sudo rm rf using asteroid.",
        "PR/Issue Number": "174"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-07-22T14:47:39Z",
        "PR Comment": "Whatever you want manu",
        "PR/Issue Number": "174"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-07-22T14:53:30Z",
        "PR Comment": "Oh well then maybe it\u2019s easier to use your implementation :)",
        "PR/Issue Number": "174"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-07-22T15:20:24Z",
        "PR Comment": "Yes @etzinis, I should have asked before ! \nWhat are the changes compared to this PR? \n\nSorry @jonashaag but it makes more sense to have the code directly from the author or the paper, I hope you understand. Let's keep this PR open until @etzinis decides.",
        "PR/Issue Number": "174"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-07-22T15:38:08Z",
        "PR Comment": "No worries! Sorry for interfering. I did not realize that @etzinis was aware of Asteroid and even a contributor.",
        "PR/Issue Number": "174"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-07-22T16:43:34Z",
        "PR Comment": "I think @jonashaag  did a great job so I think that we could actually merge his architecture. My implementation was adding stuff into other parts of the code as well. But the very important thing that we also need is the data augmentation part. How about putting a PR with my changes and then @jonashaag  can adjust these changes accordingly to this PR which is in better shape. @mpariente WDYT?",
        "PR/Issue Number": "174"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-07-23T06:35:39Z",
        "PR Comment": "That sounds good ! \nWe're waiting for your PR @etzinis then, thanks to both of you ",
        "PR/Issue Number": "174"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-07-27T00:36:33Z",
        "PR Comment": "Ok please check this PR https://github.com/mpariente/asteroid/pull/185",
        "PR/Issue Number": "174"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-10T10:10:05Z",
        "PR Comment": "So @etzinis, let's merge this? ",
        "PR/Issue Number": "174"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-17T10:02:55Z",
        "PR Comment": "Integrated asteroid filterbanks, updated docs and included tests. \n@etzinis can you have a look? \n@jonashaag as well maybe? ",
        "PR/Issue Number": "174"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-17T14:00:17Z",
        "PR Comment": "looks good to me! How about the onliine mixing code?",
        "PR/Issue Number": "174"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-17T16:44:59Z",
        "PR Comment": "Thanks for the feedback ! \n\n> How about the onliine mixing code?\n\nI was thinking of writing a `collate_fn` for it, I'll have a look tonight",
        "PR/Issue Number": "174"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-17T16:50:40Z",
        "PR Comment": "```python\n        # Augment the data.\n        if train:\n            # Online mixing over samples of the batch. (This might cause to get\n            # utterances from the same speaker but it's highly improbable).\n            energies = torch.sum(targets ** 2, dim=-1, keepdim=True)\n            new_s1 = targets[torch.randperm(energies.shape[0]), 0, :]\n            new_s2 = targets[torch.randperm(energies.shape[0]), 1, :]\n\n            # Why is those lines needed? It's to keep the SNRs of each mixture unchanged? \n            new_s2 = new_s2 * torch.sqrt(energies[:, 1] /\n                                         (new_s2 ** 2).sum(-1, keepdims=True))\n            new_s1 = new_s1 * torch.sqrt(energies[:, 0] /\n                                         (new_s1 ** 2).sum(-1, keepdims=True))\n            inputs = new_s1 + new_s2\n            targets[:, 0, :] = new_s1\n            targets[:, 1, :] = new_s2\n```",
        "PR/Issue Number": "174"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-17T17:23:55Z",
        "PR Comment": "I added it now. \nWe'll merge this for now and see about adding the recipe afterwards (maybe after refactor will be much easier).",
        "PR/Issue Number": "174"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-13T07:08:33Z",
        "PR Comment": "Sounds good! Maybe there's also some kind of warning mode for pre-commit that we could use with flake8.",
        "PR/Issue Number": "198"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-13T07:19:56Z",
        "PR Comment": "I saw that `--exit-zero` does that, but I'm not sure it's useful because the commit is sent right? \nOr if we integrate deep source, the warnings appear locally so they can be fixed in the next commit? ",
        "PR/Issue Number": "198"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-08-13T07:20:44Z",
        "PR Comment": "TravisCI takes around 15mins per build, I'm bored. \nI'm going to switch to Github Actions soon. ",
        "PR/Issue Number": "198"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-05-20T20:29:05Z",
        "PR Comment": "Just tagging this issue #53 as related ",
        "PR/Issue Number": "109"
    },
    {
        "repo_url": "github.com/asteroid-team/asteroid",
        "filepath": "tests/models/models_test.py",
        "Creation Date": "2020-05-21T12:36:26Z",
        "PR Comment": "This implies nothing so far so I'll merge. The preparation of the model for publishing will come next",
        "PR/Issue Number": "109"
    }
]